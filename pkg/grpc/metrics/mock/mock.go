// Code generated by MockGen. DO NOT EDIT.
// Source: exported.go

// Package mock is a generated GoMock package.
package mock

import (
	metrics "github.com/go-kit/kit/metrics"
	gomock "github.com/golang/mock/gomock"
	prometheus "github.com/prometheus/client_golang/prometheus"
	reflect "reflect"
)

// MockGRPCServerMetrics is a mock of GRPCServerMetrics interface
type MockGRPCServerMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCServerMetricsMockRecorder
}

// MockGRPCServerMetricsMockRecorder is the mock recorder for MockGRPCServerMetrics
type MockGRPCServerMetricsMockRecorder struct {
	mock *MockGRPCServerMetrics
}

// NewMockGRPCServerMetrics creates a new mock instance
func NewMockGRPCServerMetrics(ctrl *gomock.Controller) *MockGRPCServerMetrics {
	mock := &MockGRPCServerMetrics{ctrl: ctrl}
	mock.recorder = &MockGRPCServerMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGRPCServerMetrics) EXPECT() *MockGRPCServerMetricsMockRecorder {
	return m.recorder
}

// StartedCounter mocks base method
func (m *MockGRPCServerMetrics) StartedCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartedCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// StartedCounter indicates an expected call of StartedCounter
func (mr *MockGRPCServerMetricsMockRecorder) StartedCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartedCounter", reflect.TypeOf((*MockGRPCServerMetrics)(nil).StartedCounter))
}

// HandledCounter mocks base method
func (m *MockGRPCServerMetrics) HandledCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandledCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// HandledCounter indicates an expected call of HandledCounter
func (mr *MockGRPCServerMetricsMockRecorder) HandledCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandledCounter", reflect.TypeOf((*MockGRPCServerMetrics)(nil).HandledCounter))
}

// StreamMsgReceivedCounter mocks base method
func (m *MockGRPCServerMetrics) StreamMsgReceivedCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamMsgReceivedCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// StreamMsgReceivedCounter indicates an expected call of StreamMsgReceivedCounter
func (mr *MockGRPCServerMetricsMockRecorder) StreamMsgReceivedCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMsgReceivedCounter", reflect.TypeOf((*MockGRPCServerMetrics)(nil).StreamMsgReceivedCounter))
}

// StreamMsgSentCounter mocks base method
func (m *MockGRPCServerMetrics) StreamMsgSentCounter() metrics.Counter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamMsgSentCounter")
	ret0, _ := ret[0].(metrics.Counter)
	return ret0
}

// StreamMsgSentCounter indicates an expected call of StreamMsgSentCounter
func (mr *MockGRPCServerMetricsMockRecorder) StreamMsgSentCounter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamMsgSentCounter", reflect.TypeOf((*MockGRPCServerMetrics)(nil).StreamMsgSentCounter))
}

// HandledDurationHistogram mocks base method
func (m *MockGRPCServerMetrics) HandledDurationHistogram() metrics.Histogram {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandledDurationHistogram")
	ret0, _ := ret[0].(metrics.Histogram)
	return ret0
}

// HandledDurationHistogram indicates an expected call of HandledDurationHistogram
func (mr *MockGRPCServerMetricsMockRecorder) HandledDurationHistogram() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandledDurationHistogram", reflect.TypeOf((*MockGRPCServerMetrics)(nil).HandledDurationHistogram))
}

// Describe mocks base method
func (m *MockGRPCServerMetrics) Describe(arg0 chan<- *prometheus.Desc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Describe", arg0)
}

// Describe indicates an expected call of Describe
func (mr *MockGRPCServerMetricsMockRecorder) Describe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Describe", reflect.TypeOf((*MockGRPCServerMetrics)(nil).Describe), arg0)
}

// Collect mocks base method
func (m *MockGRPCServerMetrics) Collect(arg0 chan<- prometheus.Metric) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", arg0)
}

// Collect indicates an expected call of Collect
func (mr *MockGRPCServerMetricsMockRecorder) Collect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockGRPCServerMetrics)(nil).Collect), arg0)
}
