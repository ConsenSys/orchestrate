// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/types/tx/tx.proto

package tx

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	error1 "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/error"
	ethereum "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/ethereum"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Method int32

const (
	// Classic Ethereum Transaction
	Method_ETH_SENDRAWTRANSACTION Method = 0
	// Quorum Constellation
	Method_ETH_SENDPRIVATETRANSACTION Method = 1
	// Quorum Tessera
	Method_ETH_SENDRAWPRIVATETRANSACTION Method = 2
	// Besu Orion
	Method_EEA_SENDPRIVATETRANSACTION Method = 3
)

var Method_name = map[int32]string{
	0: "ETH_SENDRAWTRANSACTION",
	1: "ETH_SENDPRIVATETRANSACTION",
	2: "ETH_SENDRAWPRIVATETRANSACTION",
	3: "EEA_SENDPRIVATETRANSACTION",
}

var Method_value = map[string]int32{
	"ETH_SENDRAWTRANSACTION":        0,
	"ETH_SENDPRIVATETRANSACTION":    1,
	"ETH_SENDRAWPRIVATETRANSACTION": 2,
	"EEA_SENDPRIVATETRANSACTION":    3,
}

func (x Method) String() string {
	return proto.EnumName(Method_name, int32(x))
}

func (Method) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_be952cdce9bc3bdf, []int{0}
}

type TxRequest struct {
	// Technical header (optional)
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Name of the Chain as registered on the chain registry
	// e.g. 1 for mainnet, 3 for Ropsten
	Chain string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	// Type of a protocol that should be used
	Method Method `protobuf:"varint,3,opt,name=method,proto3,enum=tx.Method" json:"method,omitempty"`
	// Params for the transaction
	Params *Params `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
	// ID of the Request in UUID RFC 4122, ISO/IEC 9834-8:2005 format
	// e.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// [option]
	ContextLabels        map[string]string `protobuf:"bytes,6,rep,name=context_labels,json=contextLabels,proto3" json:"context_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TxRequest) Reset()         { *m = TxRequest{} }
func (m *TxRequest) String() string { return proto.CompactTextString(m) }
func (*TxRequest) ProtoMessage()    {}
func (*TxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_be952cdce9bc3bdf, []int{0}
}

func (m *TxRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxRequest.Unmarshal(m, b)
}
func (m *TxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxRequest.Marshal(b, m, deterministic)
}
func (m *TxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxRequest.Merge(m, src)
}
func (m *TxRequest) XXX_Size() int {
	return xxx_messageInfo_TxRequest.Size(m)
}
func (m *TxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TxRequest proto.InternalMessageInfo

func (m *TxRequest) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *TxRequest) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *TxRequest) GetMethod() Method {
	if m != nil {
		return m.Method
	}
	return Method_ETH_SENDRAWTRANSACTION
}

func (m *TxRequest) GetParams() *Params {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *TxRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TxRequest) GetContextLabels() map[string]string {
	if m != nil {
		return m.ContextLabels
	}
	return nil
}

type TxEnvelope struct {
	// Types that are valid to be assigned to Msg:
	//	*TxEnvelope_TxRequest
	//	*TxEnvelope_TxResponse
	Msg                  isTxEnvelope_Msg  `protobuf_oneof:"msg"`
	InternalLabels       map[string]string `protobuf:"bytes,1,rep,name=internal_labels,json=internalLabels,proto3" json:"internal_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TxEnvelope) Reset()         { *m = TxEnvelope{} }
func (m *TxEnvelope) String() string { return proto.CompactTextString(m) }
func (*TxEnvelope) ProtoMessage()    {}
func (*TxEnvelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_be952cdce9bc3bdf, []int{1}
}

func (m *TxEnvelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxEnvelope.Unmarshal(m, b)
}
func (m *TxEnvelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxEnvelope.Marshal(b, m, deterministic)
}
func (m *TxEnvelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxEnvelope.Merge(m, src)
}
func (m *TxEnvelope) XXX_Size() int {
	return xxx_messageInfo_TxEnvelope.Size(m)
}
func (m *TxEnvelope) XXX_DiscardUnknown() {
	xxx_messageInfo_TxEnvelope.DiscardUnknown(m)
}

var xxx_messageInfo_TxEnvelope proto.InternalMessageInfo

type isTxEnvelope_Msg interface {
	isTxEnvelope_Msg()
}

type TxEnvelope_TxRequest struct {
	TxRequest *TxRequest `protobuf:"bytes,2,opt,name=tx_request,json=txRequest,proto3,oneof"`
}

type TxEnvelope_TxResponse struct {
	TxResponse *TxResponse `protobuf:"bytes,3,opt,name=tx_response,json=txResponse,proto3,oneof"`
}

func (*TxEnvelope_TxRequest) isTxEnvelope_Msg() {}

func (*TxEnvelope_TxResponse) isTxEnvelope_Msg() {}

func (m *TxEnvelope) GetMsg() isTxEnvelope_Msg {
	if m != nil {
		return m.Msg
	}
	return nil
}

func (m *TxEnvelope) GetTxRequest() *TxRequest {
	if x, ok := m.GetMsg().(*TxEnvelope_TxRequest); ok {
		return x.TxRequest
	}
	return nil
}

func (m *TxEnvelope) GetTxResponse() *TxResponse {
	if x, ok := m.GetMsg().(*TxEnvelope_TxResponse); ok {
		return x.TxResponse
	}
	return nil
}

func (m *TxEnvelope) GetInternalLabels() map[string]string {
	if m != nil {
		return m.InternalLabels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TxEnvelope) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TxEnvelope_TxRequest)(nil),
		(*TxEnvelope_TxResponse)(nil),
	}
}

type Params struct {
	// Sender of the transaction - Ethereum Account Address
	// e.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	// The address of the receiver. null when itâ€™s a contract creation transaction.
	// e.g. 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C
	To string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	// Integer of the gas provided for the transaction execution.
	Gas string `protobuf:"bytes,4,opt,name=gas,proto3" json:"gas,omitempty"`
	// Integer of the gas price used for each paid gas.
	// e.g 0xaf23b
	GasPrice string `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	// Integer of the value sent with this transaction.
	// e.g 0xaf23
	Value string `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
	// Integer of a nonce.
	Nonce string `protobuf:"bytes,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// Hash of the method signature (4 bytes) followed by encoded parameters.
	// e.g 0xa9059cbb000000000000000000000000ff778b716fc07d98839f48ddb88d8be583beb684000000000000000000000000000000000000000000000000002386f26fc10000
	Data string `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	// Contract identifier
	// e.g. "ERC20[v1.0.0]"
	Contract string `protobuf:"bytes,9,opt,name=contract,proto3" json:"contract,omitempty"`
	// Signature of the method to call on contract
	// e.g "transfer(address,uint256)"
	MethodSignature string `protobuf:"bytes,10,opt,name=method_signature,json=methodSignature,proto3" json:"method_signature,omitempty"`
	// Arguments to feed on transaction call
	Args []string `protobuf:"bytes,11,rep,name=args,proto3" json:"args,omitempty"`
	// The signed, RLP encoded transaction
	Raw                  string   `protobuf:"bytes,12,opt,name=raw,proto3" json:"raw,omitempty"`
	PrivateFor           []string `protobuf:"bytes,13,rep,name=private_for,json=privateFor,proto3" json:"private_for,omitempty"`
	PrivateFrom          string   `protobuf:"bytes,14,opt,name=private_from,json=privateFrom,proto3" json:"private_from,omitempty"`
	PrivateTxType        string   `protobuf:"bytes,15,opt,name=private_tx_type,json=privateTxType,proto3" json:"private_tx_type,omitempty"`
	PrivacyGroupId       string   `protobuf:"bytes,16,opt,name=privacy_group_id,json=privacyGroupId,proto3" json:"privacy_group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_be952cdce9bc3bdf, []int{2}
}

func (m *Params) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Params.Unmarshal(m, b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Params.Marshal(b, m, deterministic)
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return xxx_messageInfo_Params.Size(m)
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Params) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Params) GetGas() string {
	if m != nil {
		return m.Gas
	}
	return ""
}

func (m *Params) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func (m *Params) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Params) GetNonce() string {
	if m != nil {
		return m.Nonce
	}
	return ""
}

func (m *Params) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Params) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *Params) GetMethodSignature() string {
	if m != nil {
		return m.MethodSignature
	}
	return ""
}

func (m *Params) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *Params) GetRaw() string {
	if m != nil {
		return m.Raw
	}
	return ""
}

func (m *Params) GetPrivateFor() []string {
	if m != nil {
		return m.PrivateFor
	}
	return nil
}

func (m *Params) GetPrivateFrom() string {
	if m != nil {
		return m.PrivateFrom
	}
	return ""
}

func (m *Params) GetPrivateTxType() string {
	if m != nil {
		return m.PrivateTxType
	}
	return ""
}

func (m *Params) GetPrivacyGroupId() string {
	if m != nil {
		return m.PrivacyGroupId
	}
	return ""
}

type TxResponse struct {
	// Extra information (optional)
	Headers map[string]string `protobuf:"bytes,1,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// ID of the Response in UUID RFC 4122, ISO/IEC 9834-8:2005 format
	// e.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// [option]
	ContextLabels map[string]string     `protobuf:"bytes,3,rep,name=context_labels,json=contextLabels,proto3" json:"context_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Transaction   *ethereum.Transaction `protobuf:"bytes,4,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Receipt       *ethereum.Receipt     `protobuf:"bytes,5,opt,name=receipt,proto3" json:"receipt,omitempty"`
	// Name of the Chain as registered on the chain registry
	// e.g. 1 for mainnet, 3 for Ropsten
	Chain                string          `protobuf:"bytes,7,opt,name=chain,proto3" json:"chain,omitempty"`
	Errors               []*error1.Error `protobuf:"bytes,6,rep,name=errors,proto3" json:"errors,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TxResponse) Reset()         { *m = TxResponse{} }
func (m *TxResponse) String() string { return proto.CompactTextString(m) }
func (*TxResponse) ProtoMessage()    {}
func (*TxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_be952cdce9bc3bdf, []int{3}
}

func (m *TxResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxResponse.Unmarshal(m, b)
}
func (m *TxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxResponse.Marshal(b, m, deterministic)
}
func (m *TxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxResponse.Merge(m, src)
}
func (m *TxResponse) XXX_Size() int {
	return xxx_messageInfo_TxResponse.Size(m)
}
func (m *TxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TxResponse proto.InternalMessageInfo

func (m *TxResponse) GetHeaders() map[string]string {
	if m != nil {
		return m.Headers
	}
	return nil
}

func (m *TxResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *TxResponse) GetContextLabels() map[string]string {
	if m != nil {
		return m.ContextLabels
	}
	return nil
}

func (m *TxResponse) GetTransaction() *ethereum.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TxResponse) GetReceipt() *ethereum.Receipt {
	if m != nil {
		return m.Receipt
	}
	return nil
}

func (m *TxResponse) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *TxResponse) GetErrors() []*error1.Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

func init() {
	proto.RegisterEnum("tx.Method", Method_name, Method_value)
	proto.RegisterType((*TxRequest)(nil), "tx.TxRequest")
	proto.RegisterMapType((map[string]string)(nil), "tx.TxRequest.ContextLabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "tx.TxRequest.HeadersEntry")
	proto.RegisterType((*TxEnvelope)(nil), "tx.TxEnvelope")
	proto.RegisterMapType((map[string]string)(nil), "tx.TxEnvelope.InternalLabelsEntry")
	proto.RegisterType((*Params)(nil), "tx.Params")
	proto.RegisterType((*TxResponse)(nil), "tx.TxResponse")
	proto.RegisterMapType((map[string]string)(nil), "tx.TxResponse.ContextLabelsEntry")
	proto.RegisterMapType((map[string]string)(nil), "tx.TxResponse.HeadersEntry")
}

func init() {
	proto.RegisterFile("pkg/types/tx/tx.proto", fileDescriptor_be952cdce9bc3bdf)
}

var fileDescriptor_be952cdce9bc3bdf = []byte{
	// 830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0x51, 0x6f, 0xe3, 0x44,
	0x10, 0x6e, 0xec, 0x6b, 0xda, 0x8c, 0xdb, 0x34, 0x2c, 0x1c, 0xb2, 0x5c, 0x01, 0x69, 0x74, 0x42,
	0x01, 0x84, 0x2d, 0x02, 0x08, 0x74, 0x4f, 0xe4, 0x4a, 0x7a, 0xa9, 0x80, 0x52, 0xb9, 0x16, 0x48,
	0xbc, 0x58, 0x5b, 0x67, 0xeb, 0x58, 0x4d, 0xbc, 0x66, 0x77, 0xd2, 0x73, 0xfe, 0x00, 0xfc, 0x0b,
	0xfe, 0x09, 0x7f, 0x8b, 0x67, 0xb4, 0xbb, 0x76, 0xe2, 0xde, 0xf5, 0x84, 0xfa, 0xc4, 0x8b, 0xb5,
	0xfb, 0xcd, 0x37, 0x33, 0x3b, 0xb3, 0xb3, 0x9f, 0xe1, 0x69, 0x71, 0x9b, 0x06, 0xb8, 0x2e, 0x98,
	0x0c, 0xb0, 0x0c, 0xb0, 0xf4, 0x0b, 0xc1, 0x91, 0x13, 0x0b, 0x4b, 0xef, 0x78, 0x6b, 0x62, 0x42,
	0x70, 0x61, 0xbe, 0x86, 0xe0, 0xf5, 0x1b, 0x46, 0x9c, 0x33, 0xc1, 0x56, 0xcb, 0x40, 0xb0, 0x84,
	0x65, 0x05, 0x56, 0x8c, 0x67, 0x0f, 0x30, 0x50, 0xd0, 0x5c, 0xd2, 0x04, 0x33, 0x9e, 0x1b, 0xd6,
	0xe0, 0x1f, 0x0b, 0x3a, 0x51, 0x19, 0xb2, 0xdf, 0x57, 0x4c, 0x22, 0xf9, 0x0a, 0xf6, 0xe6, 0x8c,
	0xce, 0x98, 0x90, 0x6e, 0xab, 0x6f, 0x0f, 0x9d, 0x91, 0xe7, 0x63, 0xe9, 0x6f, 0xec, 0xfe, 0xd4,
	0x18, 0x27, 0x39, 0x8a, 0x75, 0x58, 0x53, 0xc9, 0x7b, 0xb0, 0x9b, 0xcc, 0x69, 0x96, 0xbb, 0x56,
	0xbf, 0x35, 0xec, 0x84, 0x66, 0x43, 0x06, 0xd0, 0x5e, 0x32, 0x9c, 0xf3, 0x99, 0x6b, 0xf7, 0x5b,
	0xc3, 0xee, 0x08, 0x54, 0xa8, 0x9f, 0x34, 0x12, 0x56, 0x16, 0xc5, 0x29, 0xa8, 0xa0, 0x4b, 0xe9,
	0x3e, 0xe9, 0xb7, 0x86, 0x8e, 0xe1, 0x5c, 0x6a, 0x24, 0xac, 0x2c, 0xa4, 0x0b, 0x56, 0x36, 0x73,
	0x77, 0x75, 0x68, 0x2b, 0x9b, 0x91, 0x97, 0xd0, 0x4d, 0x78, 0x8e, 0xac, 0xc4, 0x78, 0x41, 0xaf,
	0xd9, 0x42, 0xba, 0x6d, 0x7d, 0xd4, 0xfe, 0xfd, 0xa3, 0x9e, 0x1a, 0xce, 0x8f, 0x9a, 0x62, 0x0e,
	0x7c, 0x98, 0x34, 0x31, 0xef, 0x39, 0x1c, 0x34, 0xeb, 0x21, 0x3d, 0xb0, 0x6f, 0xd9, 0xda, 0x6d,
	0xe9, 0x4c, 0x6a, 0xa9, 0x0a, 0xbb, 0xa3, 0x8b, 0x15, 0xab, 0x0b, 0xd3, 0x9b, 0xe7, 0xd6, 0xb7,
	0x2d, 0xef, 0x3b, 0x20, 0x6f, 0x26, 0x78, 0x4c, 0x84, 0xc1, 0x1f, 0x16, 0x40, 0x54, 0x4e, 0xf2,
	0x3b, 0xb6, 0xe0, 0x05, 0x23, 0x3e, 0x00, 0x96, 0xb1, 0x30, 0x87, 0xd7, 0x6c, 0x67, 0x74, 0x78,
	0xaf, 0xa2, 0xe9, 0x4e, 0xd8, 0xc1, 0xcd, 0x4d, 0x7d, 0x01, 0x8e, 0xe6, 0xcb, 0x82, 0xe7, 0x92,
	0xe9, 0x16, 0x3b, 0xa3, 0x6e, 0xed, 0x60, 0xd0, 0xe9, 0x4e, 0x08, 0xb8, 0xd9, 0x91, 0x1f, 0xe0,
	0x28, 0xcb, 0x91, 0x89, 0x9c, 0x2e, 0xea, 0xce, 0x99, 0x4b, 0x1e, 0x18, 0xb7, 0xfa, 0x2c, 0xfe,
	0x79, 0xc5, 0x6a, 0xf6, 0xae, 0x9b, 0xdd, 0x03, 0xbd, 0x31, 0xbc, 0xfb, 0x00, 0xed, 0x31, 0x1d,
	0x78, 0xb1, 0x0b, 0xf6, 0x52, 0xa6, 0x83, 0xbf, 0x6c, 0x68, 0x9b, 0x2b, 0x27, 0x04, 0x9e, 0xdc,
	0x08, 0xbe, 0xac, 0xdc, 0xf5, 0x5a, 0x5d, 0x3f, 0xf2, 0xca, 0xd9, 0x42, 0xae, 0x32, 0xa4, 0xd4,
	0xcc, 0x4b, 0x27, 0x54, 0x4b, 0x72, 0x0c, 0x9d, 0x94, 0xca, 0xb8, 0x10, 0x59, 0xc2, 0xaa, 0x39,
	0xd9, 0x4f, 0xa9, 0xbc, 0x54, 0xfb, 0x6d, 0xfa, 0x76, 0x23, 0xbd, 0x42, 0x73, 0x9e, 0x27, 0xcc,
	0xdd, 0x33, 0xa8, 0xde, 0xa8, 0xf4, 0x33, 0x8a, 0xd4, 0xdd, 0x37, 0xe9, 0xd5, 0x9a, 0x78, 0xb0,
	0xaf, 0xa6, 0x46, 0xd0, 0x04, 0xdd, 0x8e, 0x89, 0x5d, 0xef, 0xc9, 0x27, 0xd0, 0x33, 0x73, 0x1c,
	0xcb, 0x2c, 0xcd, 0x29, 0xae, 0x04, 0x73, 0x41, 0x73, 0x8e, 0x0c, 0x7e, 0x55, 0xc3, 0x2a, 0x34,
	0x15, 0xa9, 0x74, 0x9d, 0xbe, 0xad, 0x42, 0xab, 0xb5, 0xaa, 0x44, 0xd0, 0x57, 0xee, 0x81, 0xa9,
	0x44, 0xd0, 0x57, 0xe4, 0x23, 0x70, 0x0a, 0x91, 0xdd, 0x51, 0x64, 0xf1, 0x0d, 0x17, 0xee, 0xa1,
	0x26, 0x43, 0x05, 0x9d, 0x71, 0x41, 0x4e, 0xe0, 0x60, 0x43, 0x50, 0x8d, 0xea, 0x6a, 0xdf, 0xda,
	0xe9, 0x4c, 0xf5, 0xeb, 0x63, 0x38, 0xaa, 0x29, 0x58, 0xc6, 0xea, 0xfd, 0xbb, 0x47, 0x9a, 0x75,
	0x58, 0xc1, 0x51, 0x19, 0xad, 0x0b, 0x46, 0x86, 0xd0, 0xd3, 0x40, 0xb2, 0x8e, 0x53, 0xc1, 0x57,
	0x45, 0x9c, 0xcd, 0xdc, 0x9e, 0x26, 0x76, 0x2b, 0xfc, 0xa5, 0x82, 0xcf, 0x67, 0x83, 0xbf, 0x6d,
	0x35, 0xa9, 0x9b, 0x31, 0xfa, 0xfa, 0x75, 0x8d, 0x38, 0xbe, 0x3f, 0x75, 0x6f, 0x11, 0x09, 0xf3,
	0x8c, 0xad, 0xcd, 0x33, 0x9e, 0xbe, 0xf1, 0x8c, 0x6d, 0x1d, 0xed, 0xe4, 0xb5, 0x68, 0xff, 0xf9,
	0x8e, 0xc9, 0x37, 0xe0, 0x34, 0x74, 0xad, 0x52, 0x92, 0xa7, 0x7e, 0x2d, 0x7a, 0x7e, 0xb4, 0x35,
	0x86, 0x4d, 0x26, 0xf9, 0x0c, 0xf6, 0x2a, 0xc9, 0xd4, 0x63, 0xe3, 0x8c, 0xde, 0xd9, 0x3a, 0x85,
	0xc6, 0x10, 0xd6, 0x8c, 0xad, 0xc8, 0xed, 0x35, 0x45, 0xee, 0x19, 0xb4, 0xb5, 0x2a, 0xd7, 0x22,
	0x74, 0xe0, 0x1b, 0x91, 0x9e, 0xa8, 0x6f, 0x58, 0xd9, 0xfe, 0x5f, 0xa5, 0xf9, 0xf4, 0xcf, 0x16,
	0xb4, 0x8d, 0xee, 0x12, 0x0f, 0xde, 0x9f, 0x44, 0xd3, 0xf8, 0x6a, 0x72, 0xf1, 0x7d, 0x38, 0xfe,
	0x35, 0x0a, 0xc7, 0x17, 0x57, 0xe3, 0xd3, 0xe8, 0xfc, 0xe7, 0x8b, 0xde, 0x0e, 0xf9, 0x10, 0xbc,
	0xda, 0x76, 0x19, 0x9e, 0xff, 0x32, 0x8e, 0x26, 0x4d, 0x7b, 0x8b, 0x9c, 0xc0, 0x07, 0x0d, 0xdf,
	0x07, 0x28, 0x96, 0x0e, 0x31, 0x19, 0xbf, 0x2d, 0x84, 0xfd, 0x62, 0xfa, 0xdb, 0x59, 0x9a, 0xe1,
	0x82, 0x5e, 0xfb, 0x09, 0x5f, 0x06, 0xa7, 0xea, 0x7e, 0xf3, 0xab, 0xb5, 0x0c, 0x92, 0x45, 0xc6,
	0x72, 0x0c, 0x6e, 0x44, 0x90, 0x70, 0xc1, 0x3e, 0x97, 0x48, 0x93, 0xdb, 0x80, 0x8b, 0x64, 0xce,
	0x24, 0x0a, 0x8a, 0xcc, 0x4f, 0x33, 0x0c, 0x9a, 0x3f, 0xca, 0xeb, 0xb6, 0xfe, 0x7b, 0x7d, 0xf9,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x24, 0x84, 0x90, 0xd9, 0x3f, 0x07, 0x00, 0x00,
}
