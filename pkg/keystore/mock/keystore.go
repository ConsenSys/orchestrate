// Code generated by MockGen. DO NOT EDIT.
// Source: exported.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	types0 "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/ethereum/types"
	big "math/big"
	reflect "reflect"
)

// MockKeyStore is a mock of KeyStore interface
type MockKeyStore struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoreMockRecorder
}

// MockKeyStoreMockRecorder is the mock recorder for MockKeyStore
type MockKeyStoreMockRecorder struct {
	mock *MockKeyStore
}

// NewMockKeyStore creates a new mock instance
func NewMockKeyStore(ctrl *gomock.Controller) *MockKeyStore {
	mock := &MockKeyStore{ctrl: ctrl}
	mock.recorder = &MockKeyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyStore) EXPECT() *MockKeyStoreMockRecorder {
	return m.recorder
}

// SignTx mocks base method
func (m *MockKeyStore) SignTx(arg0 context.Context, arg1 *big.Int, arg2 common.Address, arg3 *types.Transaction) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignTx indicates an expected call of SignTx
func (mr *MockKeyStoreMockRecorder) SignTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignTx", reflect.TypeOf((*MockKeyStore)(nil).SignTx), arg0, arg1, arg2, arg3)
}

// SignPrivateEEATx mocks base method
func (m *MockKeyStore) SignPrivateEEATx(arg0 context.Context, arg1 *big.Int, arg2 common.Address, arg3 *types.Transaction, arg4 *types0.PrivateArgs) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignPrivateEEATx", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignPrivateEEATx indicates an expected call of SignPrivateEEATx
func (mr *MockKeyStoreMockRecorder) SignPrivateEEATx(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPrivateEEATx", reflect.TypeOf((*MockKeyStore)(nil).SignPrivateEEATx), arg0, arg1, arg2, arg3, arg4)
}

// SignPrivateTesseraTx mocks base method
func (m *MockKeyStore) SignPrivateTesseraTx(arg0 context.Context, arg1 *big.Int, arg2 common.Address, arg3 *types.Transaction) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignPrivateTesseraTx", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignPrivateTesseraTx indicates an expected call of SignPrivateTesseraTx
func (mr *MockKeyStoreMockRecorder) SignPrivateTesseraTx(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPrivateTesseraTx", reflect.TypeOf((*MockKeyStore)(nil).SignPrivateTesseraTx), arg0, arg1, arg2, arg3)
}

// SignMsg mocks base method
func (m *MockKeyStore) SignMsg(arg0 context.Context, arg1 common.Address, arg2 string) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignMsg", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignMsg indicates an expected call of SignMsg
func (mr *MockKeyStoreMockRecorder) SignMsg(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignMsg", reflect.TypeOf((*MockKeyStore)(nil).SignMsg), arg0, arg1, arg2)
}

// SignRawHash mocks base method
func (m *MockKeyStore) SignRawHash(arg0 common.Address, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignRawHash", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignRawHash indicates an expected call of SignRawHash
func (mr *MockKeyStoreMockRecorder) SignRawHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignRawHash", reflect.TypeOf((*MockKeyStore)(nil).SignRawHash), arg0, arg1)
}

// GenerateAccount mocks base method
func (m *MockKeyStore) GenerateAccount(arg0 context.Context) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccount", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccount indicates an expected call of GenerateAccount
func (mr *MockKeyStoreMockRecorder) GenerateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccount", reflect.TypeOf((*MockKeyStore)(nil).GenerateAccount), arg0)
}

// ImportPrivateKey mocks base method
func (m *MockKeyStore) ImportPrivateKey(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPrivateKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportPrivateKey indicates an expected call of ImportPrivateKey
func (mr *MockKeyStoreMockRecorder) ImportPrivateKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPrivateKey", reflect.TypeOf((*MockKeyStore)(nil).ImportPrivateKey), arg0, arg1)
}
