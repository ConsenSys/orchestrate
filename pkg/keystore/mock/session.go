// Code generated by MockGen. DO NOT EDIT.
// Source: exported.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	account "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/ethereum/account"
	types0 "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/ethereum/types"
	crypto "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/keystore/crypto"
	session "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/keystore/session"
	big "math/big"
	reflect "reflect"
)

// MockSigningSession is a mock of SigningSession interface
type MockSigningSession struct {
	ctrl     *gomock.Controller
	recorder *MockSigningSessionMockRecorder
}

// MockSigningSessionMockRecorder is the mock recorder for MockSigningSession
type MockSigningSessionMockRecorder struct {
	mock *MockSigningSession
}

// NewMockSigningSession creates a new mock instance
func NewMockSigningSession(ctrl *gomock.Controller) *MockSigningSession {
	mock := &MockSigningSession{ctrl: ctrl}
	mock.recorder = &MockSigningSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSigningSession) EXPECT() *MockSigningSessionMockRecorder {
	return m.recorder
}

// SetAccount mocks base method
func (m *MockSigningSession) SetAccount(account account.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAccount", account)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAccount indicates an expected call of SetAccount
func (mr *MockSigningSessionMockRecorder) SetAccount(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccount", reflect.TypeOf((*MockSigningSession)(nil).SetAccount), account)
}

// SetChain mocks base method
func (m *MockSigningSession) SetChain(arg0 *big.Int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChain", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChain indicates an expected call of SetChain
func (mr *MockSigningSessionMockRecorder) SetChain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChain", reflect.TypeOf((*MockSigningSession)(nil).SetChain), arg0)
}

// ExecuteForTx mocks base method
func (m *MockSigningSession) ExecuteForTx(arg0 *types.Transaction) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteForTx", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteForTx indicates an expected call of ExecuteForTx
func (mr *MockSigningSessionMockRecorder) ExecuteForTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteForTx", reflect.TypeOf((*MockSigningSession)(nil).ExecuteForTx), arg0)
}

// ExecuteForMsg mocks base method
func (m *MockSigningSession) ExecuteForMsg(arg0 []byte, arg1 crypto.DSA) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteForMsg", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteForMsg indicates an expected call of ExecuteForMsg
func (mr *MockSigningSessionMockRecorder) ExecuteForMsg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteForMsg", reflect.TypeOf((*MockSigningSession)(nil).ExecuteForMsg), arg0, arg1)
}

// ExecuteForTesseraTx mocks base method
func (m *MockSigningSession) ExecuteForTesseraTx(arg0 *types.Transaction) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteForTesseraTx", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteForTesseraTx indicates an expected call of ExecuteForTesseraTx
func (mr *MockSigningSessionMockRecorder) ExecuteForTesseraTx(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteForTesseraTx", reflect.TypeOf((*MockSigningSession)(nil).ExecuteForTesseraTx), arg0)
}

// ExecuteForEEATx mocks base method
func (m *MockSigningSession) ExecuteForEEATx(arg0 *types.Transaction, arg1 *types0.PrivateArgs) ([]byte, *common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteForEEATx", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(*common.Hash)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteForEEATx indicates an expected call of ExecuteForEEATx
func (mr *MockSigningSessionMockRecorder) ExecuteForEEATx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteForEEATx", reflect.TypeOf((*MockSigningSession)(nil).ExecuteForEEATx), arg0, arg1)
}

// MockAccountManager is a mock of AccountManager interface
type MockAccountManager struct {
	ctrl     *gomock.Controller
	recorder *MockAccountManagerMockRecorder
}

// MockAccountManagerMockRecorder is the mock recorder for MockAccountManager
type MockAccountManagerMockRecorder struct {
	mock *MockAccountManager
}

// NewMockAccountManager creates a new mock instance
func NewMockAccountManager(ctrl *gomock.Controller) *MockAccountManager {
	mock := &MockAccountManager{ctrl: ctrl}
	mock.recorder = &MockAccountManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountManager) EXPECT() *MockAccountManagerMockRecorder {
	return m.recorder
}

// SigningSession mocks base method
func (m *MockAccountManager) SigningSession(arg0 context.Context, arg1 common.Address) (session.SigningSession, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SigningSession", arg0, arg1)
	ret0, _ := ret[0].(session.SigningSession)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SigningSession indicates an expected call of SigningSession
func (mr *MockAccountManagerMockRecorder) SigningSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigningSession", reflect.TypeOf((*MockAccountManager)(nil).SigningSession), arg0, arg1)
}

// ImportPrivateKey mocks base method
func (m *MockAccountManager) ImportPrivateKey(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportPrivateKey", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportPrivateKey indicates an expected call of ImportPrivateKey
func (mr *MockAccountManagerMockRecorder) ImportPrivateKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportPrivateKey", reflect.TypeOf((*MockAccountManager)(nil).ImportPrivateKey), arg0, arg1)
}

// GenerateAccount mocks base method
func (m *MockAccountManager) GenerateAccount(arg0 context.Context) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccount", arg0)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccount indicates an expected call of GenerateAccount
func (mr *MockAccountManagerMockRecorder) GenerateAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccount", reflect.TypeOf((*MockAccountManager)(nil).GenerateAccount), arg0)
}
