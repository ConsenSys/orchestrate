version: 2.1

orbs:
  go: circleci/go@1.5.0

commands:
  prepare_golang:
    description: "Checkout, install all packages and handle cache"
    steps:
      - checkout
      - go/mod-download-cached
  prepare_docker:
    description: "Docker login"
    steps:
      - run:
          name: Docker login
          command: |
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin $DOCKER_REGISTRY

  docker_build_e2e_dev:
    description: "Build Orchestrate E2E"
    steps:
      - run:
          name: Build Orchestrate E2E
          command: >-
            DOCKER_BUILDKIT=1 docker build
            --label org.label-schema.schema-version="1.0.0-rc1"
            --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
            --label org.label-schema.name="${CIRCLE_PROJECT_REPONAME}-e2e"
            --label org.label-schema.version="branch"
            --label org.label-schema.url="https://docs.orchestrate.pegasys.tech"
            --label org.label-schema.vcs-url="${CIRCLE_REPOSITORY_URL}"
            --label org.label-schema.vcs-ref="${CIRCLE_SHA1:0:8}"
            --label org.label-schema.vendor="PegaSys"
            -f ./Dockerfile.e2e
            -q
            -t ${DOCKER_REGISTRY_DEV_REPO}/orchestrate-e2e:${CIRCLE_SHA1:0:8} .

  docker_build_dev:
    description: "Build Orchestrate"
    steps:
      - run:
          name: Build Orchestrate
          command: >-
            DOCKER_BUILDKIT=1 docker build
            --label org.label-schema.schema-version="1.0.0-rc1"
            --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"`
            --label org.label-schema.name="${CIRCLE_PROJECT_REPONAME}"
            --label org.label-schema.version="branch"
            --label org.label-schema.url="https://docs.orchestrate.pegasys.tech"
            --label org.label-schema.vcs-url="${CIRCLE_REPOSITORY_URL}"
            --label org.label-schema.vcs-ref="${CIRCLE_SHA1:0:8}"
            --label org.label-schema.vendor="PegaSys"
            -q
            -t ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:8} .

jobs:
  lint:
    executor:
      name: go/default
      tag: '1.15.7'
    steps:
      - prepare_golang
      - run:
          name: Check lints
          command: |
            make lint-tools
            make lint-ci

  gobuild:
    executor:
      name: go/default
      tag: '1.15.7'
    steps:
      - prepare_golang
      - run:
          name: Build
          command: make gobuild

  test:
    docker:
      - image: cimg/go:1.15.7
      - image: postgres:10.12-alpine
        environment:
          POSTGRES_PASSWORD: "postgres"
          DB_HOST: "postgres"
    resource_class: large
    steps:
      - prepare_golang
      - run:
          name: Run unit tests
          command: make run-coverage

  race:
    executor:
      name: go/default
      tag: '1.15.7'
    resource_class: large
    steps:
      - prepare_golang
      - run:
          name: Run unit tests (race)
          command: make race

  integration:
    machine: true
    resource_class: large
    steps:
      - run:
          name: Uninstall Go
          command: sudo rm -rvf /usr/local/go/
      - go/install:
          version: 1.15.7
      - prepare_golang
      - run:
          name: Integration tests
          command: make run-integration

  push-orchestrate-image:
    docker:
      - image: cimg/base:2020.01
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - docker_build_dev
      - run:
          name: Deploy image in dev repository
          command: |
            docker push ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:8}

  push-orchestrate-e2e-image:
    docker:
      - image: cimg/base:2020.01
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - docker_build_e2e_dev
      - run:
          name: Deploy e2e image in dev repository
          command: |
            docker push ${DOCKER_REGISTRY_DEV_REPO}/orchestrate-e2e:${CIRCLE_SHA1:0:8}

  deploy-qa:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: Deploy QA environment
          command: >-
            ORCHESTRATE_NAMESPACE=qa
            ORCHESTRATE_TAG=${CIRCLE_SHA1:0:8}
            TEST_TAG=${CIRCLE_SHA1:0:8}
            ORCHESTRATE_REPOSITORY=${DOCKER_REGISTRY_DEV_REPO}/orchestrate
            TEST_REPOSITORY=${DOCKER_REGISTRY_DEV_REPO}/orchestrate-e2e
            make e2e-remote

  release-latest:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - run:
          name: Release latest
          command: |
            docker pull ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:8}
            docker tag ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:8} ${DOCKER_REGISTRY_REPO}/orchestrate:latest
            docker push ${DOCKER_REGISTRY_REPO}/orchestrate:latest

  release-tag:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: true
      - prepare_docker
      - run:
          name: Release tagged version
          command: |
            docker pull ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:8}
            docker tag ${DOCKER_REGISTRY_DEV_REPO}/orchestrate:${CIRCLE_SHA1:0:8} ${DOCKER_REGISTRY_REPO}/orchestrate:${CIRCLE_TAG}
            docker push ${DOCKER_REGISTRY_REPO}/orchestrate:${CIRCLE_TAG}
            docker tag ${DOCKER_REGISTRY_DEV_REPO}/orchestrate-e2e:${CIRCLE_SHA1:0:8} ${DOCKER_REGISTRY_REPO}/orchestrate-e2e:${CIRCLE_TAG}
            docker push ${DOCKER_REGISTRY_REPO}/orchestrate-e2e:${CIRCLE_TAG}

  deploy-staging:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: Deploy staging environment
          command: >-
            ORCHESTRATE_NAMESPACE=staging-${CIRCLE_TAG}
            ORCHESTRATE_TAG=${CIRCLE_TAG}
            TEST_TAG=${CIRCLE_TAG}
            ORCHESTRATE_REPOSITORY=${DOCKER_REGISTRY_REPO}/orchestrate
            TEST_REPOSITORY=${DOCKER_REGISTRY_REPO}/orchestrate-e2e
            ENVIRONMENT_VALUES=staging
            make e2e-remote

workflows:
  version: 2
  default:
    jobs:
      - lint
      - gobuild
      - test
      - race
      - integration
      - push-orchestrate-image:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
          requires:
            - lint
            - gobuild
            - test
            - race
            - integration
      - push-orchestrate-e2e-image:
          filters:
            branches:
              only: master
            tags:
              only: /^v.*/
          requires:
            - lint
            - gobuild
            - test
            - race
            - integration
      - deploy-qa:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
          requires:
            - push-orchestrate-image
            - push-orchestrate-e2e-image
      - release-latest:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
          requires:
            - deploy-qa
      - wait-for-approval:
          type: approval
          requires:
            - push-orchestrate-image
            - push-orchestrate-e2e-image
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - release-tag:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
      - deploy-staging:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - wait-for-approval
