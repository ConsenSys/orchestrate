// Code generated by MockGen. DO NOT EDIT.
// Source: eth_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	big "math/big"
	reflect "reflect"
)

// MockEthClient is a mock of EthClient interface
type MockEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientMockRecorder
}

// MockEthClientMockRecorder is the mock recorder for MockEthClient
type MockEthClientMockRecorder struct {
	mock *MockEthClient
}

// NewMockEthClient creates a new mock instance
func NewMockEthClient(ctrl *gomock.Controller) *MockEthClient {
	mock := &MockEthClient{ctrl: ctrl}
	mock.recorder = &MockEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthClient) EXPECT() *MockEthClientMockRecorder {
	return m.recorder
}

// BalanceAt mocks base method
func (m *MockEthClient) BalanceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceAt indicates an expected call of BalanceAt
func (mr *MockEthClientMockRecorder) BalanceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceAt", reflect.TypeOf((*MockEthClient)(nil).BalanceAt), ctx, url, account, blockNumber)
}

// StorageAt mocks base method
func (m *MockEthClient) StorageAt(ctx context.Context, url string, account common.Address, key common.Hash, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageAt", ctx, url, account, key, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageAt indicates an expected call of StorageAt
func (mr *MockEthClientMockRecorder) StorageAt(ctx, url, account, key, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageAt", reflect.TypeOf((*MockEthClient)(nil).StorageAt), ctx, url, account, key, blockNumber)
}

// CodeAt mocks base method
func (m *MockEthClient) CodeAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAt indicates an expected call of CodeAt
func (mr *MockEthClientMockRecorder) CodeAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAt", reflect.TypeOf((*MockEthClient)(nil).CodeAt), ctx, url, account, blockNumber)
}

// NonceAt mocks base method
func (m *MockEthClient) NonceAt(ctx context.Context, url string, account common.Address, blockNumber *big.Int) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NonceAt", ctx, url, account, blockNumber)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NonceAt indicates an expected call of NonceAt
func (mr *MockEthClientMockRecorder) NonceAt(ctx, url, account, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NonceAt", reflect.TypeOf((*MockEthClient)(nil).NonceAt), ctx, url, account, blockNumber)
}

// PendingBalanceAt mocks base method
func (m *MockEthClient) PendingBalanceAt(ctx context.Context, url string, account common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingBalanceAt", ctx, url, account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingBalanceAt indicates an expected call of PendingBalanceAt
func (mr *MockEthClientMockRecorder) PendingBalanceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingBalanceAt", reflect.TypeOf((*MockEthClient)(nil).PendingBalanceAt), ctx, url, account)
}

// PendingStorageAt mocks base method
func (m *MockEthClient) PendingStorageAt(ctx context.Context, url string, account common.Address, key common.Hash) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingStorageAt", ctx, url, account, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingStorageAt indicates an expected call of PendingStorageAt
func (mr *MockEthClientMockRecorder) PendingStorageAt(ctx, url, account, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingStorageAt", reflect.TypeOf((*MockEthClient)(nil).PendingStorageAt), ctx, url, account, key)
}

// PendingCodeAt mocks base method
func (m *MockEthClient) PendingCodeAt(ctx context.Context, url string, account common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCodeAt", ctx, url, account)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCodeAt indicates an expected call of PendingCodeAt
func (mr *MockEthClientMockRecorder) PendingCodeAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCodeAt", reflect.TypeOf((*MockEthClient)(nil).PendingCodeAt), ctx, url, account)
}

// PendingNonceAt mocks base method
func (m *MockEthClient) PendingNonceAt(ctx context.Context, url string, account common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", ctx, url, account)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt
func (mr *MockEthClientMockRecorder) PendingNonceAt(ctx, url, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockEthClient)(nil).PendingNonceAt), ctx, url, account)
}

// PrivEEANonce mocks base method
func (m *MockEthClient) PrivEEANonce(ctx context.Context, endpoint string, account common.Address, privateFrom string, privateFor []string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivEEANonce", ctx, endpoint, account, privateFrom, privateFor)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivEEANonce indicates an expected call of PrivEEANonce
func (mr *MockEthClientMockRecorder) PrivEEANonce(ctx, endpoint, account, privateFrom, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivEEANonce", reflect.TypeOf((*MockEthClient)(nil).PrivEEANonce), ctx, endpoint, account, privateFrom, privateFor)
}

// PrivNonce mocks base method
func (m *MockEthClient) PrivNonce(ctx context.Context, endpoint string, account common.Address, privacyGroupID string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivNonce", ctx, endpoint, account, privacyGroupID)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivNonce indicates an expected call of PrivNonce
func (mr *MockEthClientMockRecorder) PrivNonce(ctx, endpoint, account, privacyGroupID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivNonce", reflect.TypeOf((*MockEthClient)(nil).PrivNonce), ctx, endpoint, account, privacyGroupID)
}

// EEAPrivPrecompiledContractAddr mocks base method
func (m *MockEthClient) EEAPrivPrecompiledContractAddr(ctx context.Context, endpoint string) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EEAPrivPrecompiledContractAddr", ctx, endpoint)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EEAPrivPrecompiledContractAddr indicates an expected call of EEAPrivPrecompiledContractAddr
func (mr *MockEthClientMockRecorder) EEAPrivPrecompiledContractAddr(ctx, endpoint interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EEAPrivPrecompiledContractAddr", reflect.TypeOf((*MockEthClient)(nil).EEAPrivPrecompiledContractAddr), ctx, endpoint)
}
