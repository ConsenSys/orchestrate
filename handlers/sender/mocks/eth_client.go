// Code generated by MockGen. DO NOT EDIT.
// Source: eth_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/ethereum/types"
	reflect "reflect"
)

// MockEthClient is a mock of EthClient interface
type MockEthClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthClientMockRecorder
}

// MockEthClientMockRecorder is the mock recorder for MockEthClient
type MockEthClientMockRecorder struct {
	mock *MockEthClient
}

// NewMockEthClient creates a new mock instance
func NewMockEthClient(ctrl *gomock.Controller) *MockEthClient {
	mock := &MockEthClient{ctrl: ctrl}
	mock.recorder = &MockEthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthClient) EXPECT() *MockEthClientMockRecorder {
	return m.recorder
}

// SendTransaction mocks base method
func (m *MockEthClient) SendTransaction(ctx context.Context, url string, args *types.SendTxArgs) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, url, args)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockEthClientMockRecorder) SendTransaction(ctx, url, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockEthClient)(nil).SendTransaction), ctx, url, args)
}

// SendRawTransaction mocks base method
func (m *MockEthClient) SendRawTransaction(ctx context.Context, url, raw string) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawTransaction indicates an expected call of SendRawTransaction
func (mr *MockEthClientMockRecorder) SendRawTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawTransaction", reflect.TypeOf((*MockEthClient)(nil).SendRawTransaction), ctx, url, raw)
}

// SendRawPrivateTransaction mocks base method
func (m *MockEthClient) SendRawPrivateTransaction(ctx context.Context, url, raw string) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRawPrivateTransaction", ctx, url, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRawPrivateTransaction indicates an expected call of SendRawPrivateTransaction
func (mr *MockEthClientMockRecorder) SendRawPrivateTransaction(ctx, url, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRawPrivateTransaction", reflect.TypeOf((*MockEthClient)(nil).SendRawPrivateTransaction), ctx, url, raw)
}

// SendQuorumRawPrivateTransaction mocks base method
func (m *MockEthClient) SendQuorumRawPrivateTransaction(ctx context.Context, url, signedTxHash string, privateFor []string) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendQuorumRawPrivateTransaction", ctx, url, signedTxHash, privateFor)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendQuorumRawPrivateTransaction indicates an expected call of SendQuorumRawPrivateTransaction
func (mr *MockEthClientMockRecorder) SendQuorumRawPrivateTransaction(ctx, url, signedTxHash, privateFor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendQuorumRawPrivateTransaction", reflect.TypeOf((*MockEthClient)(nil).SendQuorumRawPrivateTransaction), ctx, url, signedTxHash, privateFor)
}

// StoreRaw mocks base method
func (m *MockEthClient) StoreRaw(ctx context.Context, endpoint string, data []byte, privateFrom string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRaw", ctx, endpoint, data, privateFrom)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreRaw indicates an expected call of StoreRaw
func (mr *MockEthClientMockRecorder) StoreRaw(ctx, endpoint, data, privateFrom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRaw", reflect.TypeOf((*MockEthClient)(nil).StoreRaw), ctx, endpoint, data, privateFrom)
}

// PrivDistributeRawTransaction mocks base method
func (m *MockEthClient) PrivDistributeRawTransaction(ctx context.Context, endpoint, raw string) (common.Hash, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivDistributeRawTransaction", ctx, endpoint, raw)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivDistributeRawTransaction indicates an expected call of PrivDistributeRawTransaction
func (mr *MockEthClientMockRecorder) PrivDistributeRawTransaction(ctx, endpoint, raw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivDistributeRawTransaction", reflect.TypeOf((*MockEthClient)(nil).PrivDistributeRawTransaction), ctx, endpoint, raw)
}
