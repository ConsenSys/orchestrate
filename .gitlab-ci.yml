# Use latest docker image for new perks and shiny features
image: docker:latest

variables:
  # When using dind service we need to instruct docker, to talk with the
  # daemon started inside of the service. The daemon is available with
  # a network connection instead of the default /var/run/docker.sock socket.
  #
  # The 'docker' hostname is the alias of the service container as described at
  # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
  #
  # Note that if you're using Kubernetes executor, the variable should be set to
  # tcp://localhost:2375 because of how Kubernetes executor connects services
  # to the job container
  DOCKER_HOST: tcp://docker:2375/
  # When using dind, it's wise to use the overlayfs driver for
  # improved performance.
  DOCKER_DRIVER: overlay2
  GOPATH: ${CI_PROJECT_DIR}/.gocache


cache:
  paths:
    - /apt-cache
    - /root/go

stages:
  - cache-update
  - test
  - build

services:
  - docker:dind

before_script:
  # Add deploy ssh key so we can import go packages from private GitLab repo
  - apk add --update bash openssh git make go grep curl jq
  - apk add --update musl-dev python2-dev libffi-dev openssl-dev 
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh/id_rsa
  - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts

  # Change git config so we can import go packages from GitLab
  - git config --global --add url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf "git@gitlab.com:"
  - git config --global --add url."https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/".insteadOf "https://gitlab.com/"

  # Set GOPATH
  - mkdir "${HOME}/go"; export GOPATH="${HOME}/go"
  - export PATH="${GOPATH}/bin:${GOROOT}/bin:${PATH}"
  - make tools

  # Install docker-compose
  - apk add --no-cache py-pip
  - pip install docker-compose

cache-update:
  image: golang:1.12
  stage: cache-update
  script:
    - go mod download -json
  cache:
    policy: push
    paths:
      - ${GOPATH}
  only:
    - master

test:
  stage: test
  coverage: /^total:.*\s(\d+.\d+)%/
  script:
    - export SSH_KEY=${SSH_DEPLOY_CORE_STACK}
    - cd e2e/hashicorp
    - docker-compose down || echo "Docker missing skipping"
    - docker-compose up --build --force-recreate -d
    - docker exec hashicorp_key-store_1 bash -c "go mod download && cd e2e/hashicorp/scripts && bash run-test.sh"
    - exit $?
  cache:
    paths:
      - /apt-cache
      - /root/go

test-lint:
  image: golang:1.12
  stage: test
  script:
    - make race
    - make lint
  cache:
    policy: pull
    paths:
      - ${GOPATH}
  except:
      - tags

build-on-branch:
  image: docker:stable
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - export SSH_KEY=${SSH_DEPLOY_CORE_STACK}
    # Build image following http://label-schema.org/rc1/ label convention convention
    - docker build --build-arg SSH_KEY --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"` --label org.label-schema.name="${CI_PROJECT_NAME}" --label org.label-schema.version="dirty" --label org.label-schema.vcs-url="${CI_PROJECT_URL}" --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}" --label org.label-schema.vendor="ConsenSys France" -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG} .
    # Push images
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  after_script:
    - docker logout $CI_REGISTRY
  only:
    - /^dev[a-zA-Z0-9\/-]*$/
    - /^feature/[a-zA-Z0-9\/-]*$/
    - /^fix/[a-zA-Z0-9\/-]*$/

build-on-master:
  image: docker:stable
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - export SSH_KEY=${SSH_DEPLOY_CORE_STACK}
    # Build image following http://label-schema.org/rc1/ label convention convention
    - docker build --build-arg SSH_KEY --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"` --label org.label-schema.name="${CI_PROJECT_NAME}" --label org.label-schema.version="dirty" --label org.label-schema.vcs-url="${CI_PROJECT_URL}" --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}" --label org.label-schema.vendor="ConsenSys France" -t ${CI_REGISTRY_IMAGE}:latest .
    # Push images
    - docker push ${CI_REGISTRY_IMAGE}:latest
  after_script:
    - docker logout $CI_REGISTRY
  only:
    - master


build-on-tag:
  image: docker:stable
  stage: build
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  script:
    - export SSH_KEY=${SSH_DEPLOY_CORE_STACK}
    # Build image following http://label-schema.org/rc1/ label convention convention
    - docker build --build-arg SSH_KEY --label org.label-schema.build-date=`date -u +"%Y-%m-%dT%H:%M:%SZ"` --label org.label-schema.name="${CI_PROJECT_NAME}" --label org.label-schema.version="${CI_COMMIT_TAG}" --label org.label-schema.vcs-url="${CI_PROJECT_URL}" --label org.label-schema.vcs-ref="${CI_COMMIT_SHA:0:8}" --label org.label-schema.vendor="ConsenSys France" -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG} .
    # Push images
    - docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}
  after_script:
    - docker logout $CI_REGISTRY
  only:
    refs:
      - tags
