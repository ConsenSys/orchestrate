syntax = "proto3";

package context.manager;

import "protobuf/ethereum/ethereum.proto";
import "google/protobuf/any.proto";

option go_package = "gitlab.com/ConsenSys/client/fr/core-stack/core/protobuf/context-trace";

// Signer of the transaction
message Sender {
    string id = 1; // Unique identifier of the signer
    string strategy = 2; // Signing strategy
}

// Contract Instance
message Receiver {
    string id = 1; // Unique identifier of the instance
    string address = 2; // Address of the instance
    string chainId = 3; // Chain where the instance is deployed
}

// Method of call on the contract
message Method {
    string id = 1; // Unique identifier of the method
    string signature = 2; // Signature of the method
}

// Input message
message Input {
    Sender sender = 1; // Sender of the transaction

    string value = 2; // Value to send in the transaction

    Receiver receiver = 3; // Receiver of the transaction
    Method method = 4; // Method to call in case transaction triggers a contract
    repeated google.protobuf.Any args = 5; // Arguments to feed to transaction call
}

// Information about execution
message Execution {
    string id = 1; // Unique ID of the execution
    Transaction transaction = 2; // Transaction generated during execution
    Receipt receipt = 3; // Receipt of the transaction after being mined
    Error error = 4; // Possible error encountered during execution
}

// Metadata attached to the trace
message Metadata {
    string id = 1; // ID of the trace
    int32 maxRetry = 2; // Max execution retries before considering
    string retryCount = 3; // 
    repeated google.protobuf.Any extra = 5; // Extra information transmitted through trace
}

message Error {
    int32 code = 1; // TODO: switch to enum format
    string message = 2; 
}

message Policy {
    int32 errorCode = 1;
}

message Trace {
    repeated Policy policies = 1; // TODO: map with key errorCode
    Input input = 2;
    Execution currentExecution = 3;
    Metadata metadata = 4;
}