syntax = "proto3";

package context.manager;

option go_package = "gitlab.com/ConsenSys/client/fr/core-stack/core/protobuf/ethereum";

// Transaction data
message Data {
    string to = 1; // DATA (20 Bytes) - The address of the receiver. null when it’s a contract creation transaction.
    string value = 2; // QUANTITY - Integer of the value sent with this transaction.
    string data = 3; // DATA (4 bytes) - Hash of the method signature followed by encoded parameters.
    string nonce = 4; // QUANTITY - Integer of a nonce.
    string gas = 5; // QUANTITY - Integer of the gas provided for the transaction execution. 
    string gasPrice = 6; // QUANTITY - Integer of the gas price used for each paid gas.

    string v = 7; // QUANTITY - ECDSA recovery id
    string r = 8; // DATA (32 Bytes) - ECDSA signature r
    string s = 9; // DATA (32 Bytes) - ECDSA signature s
}

// Transaction
message Transaction {
    Data data = 1;
    string raw = 2; // DATA - The signed, RLP encoded transaction.
    string hash = 3; // DATA (32 Bytes) - Hash of the transaction.
    string from = 4; // DATA (20 Bytes) - Address of transaction sender
}

// Ethereum Log
message Log {
    string blockHash = 1; // DATA (32 Bytes) - Hash of the block where this transaction was in.
    string blockNumber = 2; // QUANTITY - Block number where this transaction was in.
    string logIndex = 3; // QUANTITY - Integer of the log index position in the block.
    string transactionHash = 4; // DATA (32 Bytes) - Hash of the transaction.
    string transactionIndex = 5; // QUANTITY - Integer of the transactions index position in the block.
    string address = 6; // DATA (20 Bytes) - Address from which log originated.
    string data = 7; // DATA - Non-indexed arguments of the log. 
    repeated string topics = 8; // Array of DATA (32 Bytes) - Array of 0 to 4 indexed log arguments 
}
 
// Transaction Receipt
message Receipt {
    string transactionHash = 1; // DATA (32 Bytes) - Hash of the transaction. TODO: maybe not necessary
    string blockHash = 2; // DATA (32 Bytes) - Hash of the block where this transaction was in.
    string blockNumber = 3; // QUANTITY - Block number where this transaction was in.
    string transactionIndex = 4; // QUANTITY - Integer of the transactions index position in the block.
    
    string from = 5; // DATA (20 Bytes) - The address of the sender.
    oneof receiver {
        string to = 6; // DATA (20 Bytes) - The address of the receiver. null when it’s a contract creation transaction.
        string contractAddress = 7; // DATA (20 Bytes) - The contract address created, if the transaction was a contract creation
    }

    oneof result {
        string status = 8; // QUANTITY - 0x0 indicates transaction failure , 0x1 indicates transaction success.
        string root = 9; // DATA (32 Bytes) - Merkle root of the state trie after the transaction has been executed (pre Byzantium)
    }

    string logsBloom = 10; // DATA (256 Bytes) - Bloom filter of logs/events generated by contracts during transaction execution.
    repeated Log logs = 11; // Array - Array of log objects, which this transaction generated.

    string gasUsed = 12; // QUANTITY - The amount of gas used by this specific transaction alone.
    string cumulativeGasUses = 13; // QUANTITY - The total amount of gas used when this transaction was executed in the block.
}
 