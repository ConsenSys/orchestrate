syntax = "proto3";

package context.manager;

import "protobuf/ethereum/ethereum.proto";

option go_package = "gitlab.com/ConsenSys/client/fr/core-stack/core/protobuf/trace";

// Signer of the transaction
message Sender {
    string userId = 1; // Unique identifier of the user
    string privateKeyId = 2; // Unique identifier of the receiver
    string strategy = 3; // Signing strategy
}

// Chain to send transacion to
message Chain {
    string id = 1; // Chain ID
    bool isEIP155 = 2; // Indicate if chain implements EIP155
}

// Receiver of transaction
message Receiver {
    string id = 1; // Unique identifier of the instance
    string address = 2; // Address of the instance
}

// Method of call on the contract
message Call {
    string methodId = 1; // Unique identifier of the method to call
    string value = 2; // Value to feef in transaction call
    repeated string args = 3; // Arguments to feed to transaction call
}

// Input message
// message Input {
//     Sender sender = 1; // Sender of the transaction

//     string value = 2; 
//     Receiver receiver = 3; // Receiver of the transaction
//     Call call = 4; // Method to call in case transaction triggers a contract
    
// }

// Information about execution
// message Execution {
//     string id = 1; // Unique ID of the execution
//     Transaction transaction = 2; // Transaction generated during execution
//     Receipt receipt = 3; // Receipt of the transaction after being mined
//     Error error = 4; // Possible error encountered during execution
// }

// Metadata attached to the trace
// message Metadata {
//     string id = 1; // ID of the trace
//     int32 maxRetry = 2; // Max execution retries before considering
//     string retryCount = 3; // 
//     repeated google.protobuf.Any extra = 5; // Extra information transmitted through trace
// }

// message Error {
//     int32 code = 1; // TODO: switch to enum format
//     string message = 2; 
// }

// message Policy {
//     int32 errorCode = 1;
// }

message Trace {
    Sender sender = 1;
    Chain chain = 2;
    Receiver receiver = 3;
    Call call = 4;
    Transaction transaction = 5;
}