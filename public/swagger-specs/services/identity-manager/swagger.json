{
    "swagger": "2.0",
    "info": {
        "description": "PegaSys Orchestrate Account API. Enables dynamic management of identities.\nIdentities correspond to an Ethereum accounts. It can be a user account or a deployed smart contract. By usage of the generated cryptographic key pair, identities can be used to sign/verify and to encrypt/decrypt messages.",
        "title": "Identity Manager API",
        "contact": {
            "name": "Contact PegaSys Orchestrate",
            "url": "https://pegasys.tech/contact/",
            "email": "support@pegasys.tech"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0"
    },
    "paths": {
        "/accounts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Get a list of filtered accounts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Search accounts by provided filters",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "List of account aliases",
                        "name": "aliases",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of identities found",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/identitymanager.AccountResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid filter in the request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new Account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a new Account",
                "parameters": [
                    {
                        "description": "Account creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/identitymanager.CreateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account object",
                        "schema": {
                            "$ref": "#/definitions/identitymanager.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/import": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Creates a new Account by importing a private key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Creates a new Account by importing a private key",
                "parameters": [
                    {
                        "description": "Account creation request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/identitymanager.ImportAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account object",
                        "schema": {
                            "$ref": "#/definitions/identitymanager.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Not allowed",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{address}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Fetch a single account by address",
                "produces": [
                    "application/json"
                ],
                "summary": "Fetch a account by address",
                "parameters": [
                    {
                        "type": "string",
                        "description": "selected account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account found",
                        "schema": {
                            "$ref": "#/definitions/identitymanager.AccountResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Update a specific account by Address",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Update account by Address",
                "parameters": [
                    {
                        "description": "Account update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/identitymanager.UpdateAccountRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Account found",
                        "schema": {
                            "$ref": "#/definitions/identitymanager.AccountResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/accounts/{address}/sign": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    },
                    {
                        "JWTAuth": []
                    }
                ],
                "description": "Sign sent data using provided account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Sign arbitrary data",
                "parameters": [
                    {
                        "type": "string",
                        "description": "selected account address",
                        "name": "address",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data signature",
                        "schema": {
                            "$ref": "#/definitions/identitymanager.SignPayloadRequest"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ethereum/accounts/verify-signature": {
            "post": {
                "description": "Verifies if a message has been signed by the Ethereum account passed as argument",
                "consumes": [
                    "application/json"
                ],
                "summary": "Verifies the signature of a message",
                "parameters": [
                    {
                        "description": "signature and message to verify",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/keymanager.VerifyPayloadRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ethereum/accounts/verify-typed-data-signature": {
            "post": {
                "description": "Verifies if a typed data message has been signed by the Ethereum account passed as argument following the EIP-712 standard",
                "consumes": [
                    "application/json"
                ],
                "summary": "Verifies the signature of a typed data message following the EIP-712 standard",
                "parameters": [
                    {
                        "description": "Typed data to sign",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/ethereum.VerifyTypedDataRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "domainSeparator": {
                                            "$ref": "#/definitions/ethereum.DomainSeparator"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "204": {},
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/ethereum/accounts/{address}/sign-typed-data": {
            "post": {
                "description": "Signs typed data using ECDSA and the private key of an existing account following the EIP-712 standard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "summary": "Signs typed data using an existing account following the EIP-712 standard",
                "parameters": [
                    {
                        "description": "Typed data to sign",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/identitymanager.SignTypedDataRequest"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "domainSeparator": {
                                            "$ref": "#/definitions/ethereum.DomainSeparator"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Signed payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Account not found",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Invalid parameters",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/httputil.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ethereum.DomainSeparator": {
            "type": "object",
            "required": [
                "chainID",
                "name",
                "version"
            ],
            "properties": {
                "chainID": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "MyDApp"
                },
                "salt": {
                    "type": "string",
                    "example": "some-random-string"
                },
                "verifyingContract": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "version": {
                    "type": "string",
                    "example": "v1.0.0"
                }
            }
        },
        "ethereum.VerifyTypedDataRequest": {
            "type": "object",
            "required": [
                "address",
                "data",
                "signature"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "data": {
                    "type": "SignTypedDataRequest"
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        },
        "httputil.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 24000
                },
                "message": {
                    "type": "string",
                    "example": "error message"
                }
            }
        },
        "identitymanager.AccountResponse": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string",
                    "example": "1abae27a0cbfb02945720425d3b80c7e09728534"
                },
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "compressedPublicKey": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                },
                "publicKey": {
                    "type": "string",
                    "example": "048e66b3e549818ea2cb354fb70749f6c8de8fa484f7530fc447d5fe80a1c424e4f5ae648d648c980ae7095d1efad87161d83886ca4b6c498ac22a93da5099014a"
                },
                "tenantID": {
                    "type": "string",
                    "example": "foo"
                },
                "updatedAt": {
                    "type": "string",
                    "example": "2020-07-09T12:35:42.115395Z"
                }
            }
        },
        "identitymanager.CreateAccountRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "chain": {
                    "type": "string",
                    "example": "besu"
                }
            }
        },
        "identitymanager.ImportAccountRequest": {
            "type": "object",
            "required": [
                "privateKey"
            ],
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "chain": {
                    "type": "string",
                    "example": "quorum"
                },
                "privateKey": {
                    "type": "string",
                    "example": "66232652FDFFD802B7252A456DBD8F3ECC0352BBDE76C23B40AFE8AEBD714E2D"
                }
            }
        },
        "identitymanager.SignPayloadRequest": {
            "type": "object",
            "required": [
                "data"
            ],
            "properties": {
                "data": {
                    "type": "string",
                    "example": "data to sign"
                }
            }
        },
        "identitymanager.SignTypedDataRequest": {
            "type": "object",
            "required": [
                "domainSeparator",
                "message",
                "messageType",
                "types"
            ],
            "properties": {
                "domainSeparator": {
                    "type": "object",
                    "$ref": "#/definitions/ethereum.DomainSeparator"
                },
                "message": {
                    "type": "object",
                    "additionalProperties": true
                },
                "messageType": {
                    "type": "string",
                    "example": "Mail"
                },
                "types": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/ethereum.Type"
                        }
                    }
                }
            }
        },
        "identitymanager.UpdateAccountRequest": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string",
                    "example": "personal-account"
                },
                "attributes": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            }
        },
        "keymanager.VerifyPayloadRequest": {
            "type": "object",
            "required": [
                "address",
                "data",
                "signature"
            ],
            "properties": {
                "address": {
                    "type": "string",
                    "example": "0x905B88EFf8Bda1543d4d6f4aA05afef143D27E18"
                },
                "data": {
                    "type": "string",
                    "example": "my data to sign"
                },
                "signature": {
                    "type": "string",
                    "example": "0x6019a3c8..."
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "X-API-Key",
            "in": "header"
        },
        "JWTAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}