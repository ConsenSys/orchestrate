{
  "swagger": "2.0",
  "info": {
    "title": "Envelope-Store",
    "version": "1.0",
    "contact": {
      "name": "✉ PegaSys Orchestrate",
      "email": "support@pegasys.tech"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/envelopes/{id}": {
      "get": {
        "summary": "Load envelope by identifier",
        "operationId": "LoadByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/envelopestoreStoreResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Envelope identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvelopeStore"
        ]
      }
    }
  },
  "definitions": {
    "envelopestoreLoadPendingResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/envelopestoreStoreResponse"
          },
          "title": "Pending envelopes"
        }
      }
    },
    "envelopestoreStatus": {
      "type": "string",
      "enum": [
        "STORED",
        "PENDING",
        "MINED",
        "ERROR"
      ],
      "default": "STORED",
      "title": "Possible statuses for a transaction"
    },
    "envelopestoreStatusInfo": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/envelopestoreStatus",
          "title": "Status of Transaction"
        },
        "storedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Date events for envelope"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time"
        },
        "minedAt": {
          "type": "string",
          "format": "date-time"
        },
        "errorAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "envelopestoreStatusResponse": {
      "type": "object",
      "properties": {
        "status_info": {
          "$ref": "#/definitions/envelopestoreStatusInfo"
        }
      }
    },
    "envelopestoreStoreResponse": {
      "type": "object",
      "properties": {
        "envelope": {
          "$ref": "#/definitions/txTxEnvelope",
          "title": "Envelope"
        },
        "status_info": {
          "$ref": "#/definitions/envelopestoreStatusInfo"
        }
      }
    },
    "errorError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "Error message"
        },
        "code": {
          "type": "string",
          "format": "uint64",
          "title": "Error Code of the error"
        },
        "component": {
          "type": "string",
          "title": "Component"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra information"
        }
      },
      "title": "Error"
    },
    "ethereumLog": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "title": "DATA (20 Bytes) - Address from which log originated\ne.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Array of DATA (32 Bytes) - Array of 0 to 4 indexed log arguments\ne.g. 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "data": {
          "type": "string",
          "title": "DATA - Non-indexed arguments of the log"
        },
        "event": {
          "type": "string",
          "title": "Log decoded data"
        },
        "decoded_data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "block_number": {
          "type": "string",
          "format": "uint64",
          "title": "QUANTITY - Block number where this transaction was in"
        },
        "tx_hash": {
          "type": "string",
          "title": "DATA (32 Bytes) - Hash of the transaction.\ne.g. 0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e"
        },
        "tx_index": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Integer of the transactions index position in the block."
        },
        "block_hash": {
          "type": "string",
          "title": "DATA (32 Bytes) - Hash of the block where this transaction was in.\ne.g. 0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"
        },
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "QUANTITY - Integer of the log index position in the block"
        },
        "removed": {
          "type": "boolean",
          "format": "boolean",
          "description": "Removed field is true if this log was reverted due to a chain reorganisation."
        }
      },
      "title": "Ethereum Log"
    },
    "ethereumReceipt": {
      "type": "object",
      "properties": {
        "tx_hash": {
          "type": "string",
          "title": "HASH (32 Bytes) - Hash of the transaction.\ne.g 0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e"
        },
        "block_hash": {
          "type": "string",
          "title": "HASH (32 Bytes) - Hash of the block where this transaction was in.\ne.g. 0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"
        },
        "block_number": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Block number where this transaction was in."
        },
        "tx_index": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Integer of the transactions index position in the block."
        },
        "contract_address": {
          "type": "string",
          "title": "DATA (20 Bytes) - The contract address created, if the transaction was a contract creation\ne.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "post_state": {
          "type": "string",
          "title": "DATA (32 Bytes) - State root hash after executing transaction\ne.g. 0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"
        },
        "status": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - 0 indicates transaction failure , 1 indicates transaction success."
        },
        "bloom": {
          "type": "string",
          "description": "DATA (256 Bytes) - Bloom filter of logs/events generated by contracts during transaction execution."
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ethereumLog"
          },
          "description": "Array - Array of log objects, which this transaction generated."
        },
        "gas_used": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - The amount of gas used by this specific transaction alone."
        },
        "cumulative_gas_used": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - The total amount of gas used when this transaction was executed in the block."
        }
      },
      "title": "Transaction Receipt"
    },
    "ethereumTransaction": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string"
        },
        "nonce": {
          "type": "string",
          "description": "QUANTITY - Integer of a nonce."
        },
        "to": {
          "type": "string",
          "title": "DATA (20 Bytes) - The address of the receiver. null when it’s a contract creation transaction.\ne.g. 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "value": {
          "type": "string",
          "title": "QUANTITY - Integer of the value sent with this transaction.\ne.g 0xaf23"
        },
        "gas": {
          "type": "string",
          "description": "QUANTITY - Integer of the gas provided for the transaction execution."
        },
        "gas_price": {
          "type": "string",
          "title": "QUANTITY - Integer of the gas price used for each paid gas.\ne.g 0xaf23b"
        },
        "data": {
          "type": "string",
          "title": "DATA - Hash of the method signature (4 bytes) followed by encoded parameters.\ne.g 0xa9059cbb000000000000000000000000ff778b716fc07d98839f48ddb88d8be583beb684000000000000000000000000000000000000000000000000002386f26fc10000"
        },
        "raw": {
          "type": "string",
          "title": "DATA - The signed, RLP encoded transaction"
        },
        "tx_hash": {
          "type": "string",
          "title": "DATA (32 Bytes) - Hash of the transaction.\ne.g. 0x0a0cafa26ca3f411e6629e9e02c53f23713b0033d7a72e534136104b5447a210"
        }
      },
      "title": "Transaction"
    },
    "txMethod": {
      "type": "string",
      "enum": [
        "ETH_SENDRAWTRANSACTION",
        "ETH_SENDPRIVATETRANSACTION",
        "ETH_SENDRAWPRIVATETRANSACTION",
        "EEA_SENDPRIVATETRANSACTION"
      ],
      "default": "ETH_SENDRAWTRANSACTION",
      "title": "- ETH_SENDRAWTRANSACTION: Classic Ethereum Transaction\n - ETH_SENDPRIVATETRANSACTION: Quorum Constellation\n - ETH_SENDRAWPRIVATETRANSACTION: Quorum Tessera\n - EEA_SENDPRIVATETRANSACTION: Besu Orion"
    },
    "txParams": {
      "type": "object",
      "properties": {
        "from": {
          "type": "string",
          "title": "Sender of the transaction - Ethereum Account Address\ne.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "to": {
          "type": "string",
          "title": "The address of the receiver. null when it’s a contract creation transaction.\ne.g. 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "gas": {
          "type": "string",
          "description": "Integer of the gas provided for the transaction execution."
        },
        "gas_price": {
          "type": "string",
          "title": "Integer of the gas price used for each paid gas.\ne.g 0xaf23b"
        },
        "value": {
          "type": "string",
          "title": "Integer of the value sent with this transaction.\ne.g 0xaf23"
        },
        "nonce": {
          "type": "string",
          "description": "Integer of a nonce."
        },
        "data": {
          "type": "string",
          "title": "Hash of the method signature (4 bytes) followed by encoded parameters.\ne.g 0xa9059cbb000000000000000000000000ff778b716fc07d98839f48ddb88d8be583beb684000000000000000000000000000000000000000000000000002386f26fc10000"
        },
        "contract": {
          "type": "string",
          "title": "Contract identifier\ne.g. \"ERC20[v1.0.0]\""
        },
        "method_signature": {
          "type": "string",
          "title": "Signature of the method to call on contract\ne.g \"transfer(address,uint256)\""
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Arguments to feed on transaction call"
        },
        "raw": {
          "type": "string",
          "title": "The signed, RLP encoded transaction"
        },
        "private_for": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "private_from": {
          "type": "string"
        },
        "private_tx_type": {
          "type": "string"
        },
        "privacy_group_id": {
          "type": "string"
        }
      }
    },
    "txTxEnvelope": {
      "type": "object",
      "properties": {
        "tx_request": {
          "$ref": "#/definitions/txTxRequest"
        },
        "tx_response": {
          "$ref": "#/definitions/txTxResponse"
        },
        "internal_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "txTxRequest": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Technical header (optional)"
        },
        "chain": {
          "type": "string",
          "title": "Name of the Chain as registered on the chain registry\ne.g. 1 for mainnet, 3 for Ropsten"
        },
        "method": {
          "$ref": "#/definitions/txMethod",
          "title": "Type of a protocol that should be used"
        },
        "params": {
          "$ref": "#/definitions/txParams",
          "title": "Params for the transaction"
        },
        "id": {
          "type": "string",
          "title": "ID of the Request in UUID RFC 4122, ISO/IEC 9834-8:2005 format\ne.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
        },
        "context_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "[option]"
        }
      }
    },
    "txTxResponse": {
      "type": "object",
      "properties": {
        "headers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra information (optional)"
        },
        "id": {
          "type": "string",
          "title": "ID of the Response in UUID RFC 4122, ISO/IEC 9834-8:2005 format\ne.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
        },
        "context_labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "[option]"
        },
        "transaction": {
          "$ref": "#/definitions/ethereumTransaction"
        },
        "receipt": {
          "$ref": "#/definitions/ethereumReceipt"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorError"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "description": "Add the value of your API-Key",
      "name": "X-API-Key",
      "in": "header"
    },
    "JWTAuth": {
      "type": "apiKey",
      "description": "Add your Token as: `Bearer` Token",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "JWTAuth": []
    },
    {
      "ApiKeyAuth": []
    }
  ],
  "externalDocs": {
    "description": "📒 Documentation of PegaSys Orchestrate",
    "url": "https://docs.orchestrate.pegasys.tech/en/latest/"
  }
}
