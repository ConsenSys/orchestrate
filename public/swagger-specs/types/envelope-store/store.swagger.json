{
  "swagger": "2.0",
  "info": {
    "title": "Envelope-Store",
    "version": "1.0",
    "contact": {
      "name": "âœ‰ PegaSys Orchestrate",
      "email": "support@pegasys.tech"
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/envelopes/{id}": {
      "get": {
        "summary": "Load envelope by identifier",
        "operationId": "LoadByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/envelopestoreStoreResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Envelope identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EnvelopeStore"
        ]
      }
    }
  },
  "definitions": {
    "abiContract": {
      "type": "object",
      "properties": {
        "id": {
          "$ref": "#/definitions/abiContractId",
          "title": "A set of fields that identify a contract on a particular chain"
        },
        "abi": {
          "type": "string",
          "format": "byte",
          "title": "Contract ABI (optional)"
        },
        "bytecode": {
          "type": "string",
          "format": "byte",
          "title": "Contract deployment bytecode (optional)"
        },
        "methods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/abiMethod"
          },
          "title": "Methods of the contract"
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/abiEvent"
          },
          "title": "Event of the contract"
        },
        "deployedBytecode": {
          "type": "string",
          "format": "byte",
          "title": "Contract deployed bytecode (optional)"
        }
      },
      "title": "Contract holds contract information"
    },
    "abiContractId": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string",
          "title": "Registry of contract\ne.g. \"registry.consensys.net/orchestrate\""
        },
        "name": {
          "type": "string",
          "title": "Name of contract\ne.g. \"ERC20\""
        },
        "tag": {
          "type": "string",
          "title": "Contract tag\ne.g \"v2.1.3\""
        }
      }
    },
    "abiEvent": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "title": "Name of the event to call on contract\ne.g \"Transfer(address, address, uint256)\""
        },
        "abi": {
          "type": "string",
          "format": "byte",
          "title": "ABI of the method (Optional)"
        }
      },
      "title": "Event"
    },
    "abiMethod": {
      "type": "object",
      "properties": {
        "signature": {
          "type": "string",
          "title": "Signature of the method to call on contract\ne.g \"transfer(address,uint256)\""
        },
        "abi": {
          "type": "string",
          "format": "byte",
          "title": "ABI of the method (Optional)"
        }
      },
      "title": "Method"
    },
    "argsCall": {
      "type": "object",
      "properties": {
        "contract": {
          "$ref": "#/definitions/abiContract",
          "title": "Contract to call method on"
        },
        "method": {
          "$ref": "#/definitions/abiMethod",
          "title": "Method to call"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Arguments to feed on transaction call"
        }
      },
      "title": "Call contains information for a contract call"
    },
    "argsPrivate": {
      "type": "object",
      "properties": {
        "private_from": {
          "type": "string",
          "title": "When sending a private transaction, the sending party's base64-encoded public key to use.\nIf not present and passing private_for"
        },
        "private_for": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "When sending a private transaction, an array of the recipients' base64-encoded public keys."
        },
        "private_tx_type": {
          "type": "string",
          "title": "For Quorum \u003e=2.2.1 support"
        }
      },
      "title": "Private arguments"
    },
    "chainChain": {
      "type": "object",
      "properties": {
        "chain_id": {
          "type": "string",
          "format": "byte",
          "title": "Chain ID\ne.g. 1 for mainnet, 3 for Ropsten"
        },
        "uuid": {
          "type": "string",
          "title": "UUID in the chain registry"
        },
        "name": {
          "type": "string",
          "title": "Name in the chain registry"
        }
      },
      "title": "Information about a Chain"
    },
    "chainProtocol": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/chainProtocolType",
          "title": "Type of a protocol that should be used"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra information (optional)"
        }
      },
      "title": "Information about a Chain"
    },
    "chainProtocolType": {
      "type": "string",
      "enum": [
        "ETHEREUM_CONSTANTINOPLE",
        "QUORUM_CONSTELLATION",
        "QUORUM_TESSERA",
        "BESU_ORION"
      ],
      "default": "ETHEREUM_CONSTANTINOPLE"
    },
    "envelopeArgs": {
      "type": "object",
      "properties": {
        "call": {
          "$ref": "#/definitions/argsCall",
          "title": "Arguments to craft transaction"
        },
        "private": {
          "$ref": "#/definitions/argsPrivate",
          "title": "Private arguments"
        },
        "data": {
          "$ref": "#/definitions/ethereumData",
          "title": "Arbitrary data provided by user"
        }
      },
      "title": "Args are provided when requesting an execution"
    },
    "envelopeEnvelope": {
      "type": "object",
      "properties": {
        "chain": {
          "$ref": "#/definitions/chainChain",
          "title": "Chain the transaction is orchestrated for"
        },
        "protocol": {
          "$ref": "#/definitions/chainProtocol",
          "title": "Protocol the transaction is orchestrated for"
        },
        "from": {
          "$ref": "#/definitions/ethereumAccount",
          "title": "Sender of the transaction\nDATA (20 Bytes) - Ethereum Account Address\ne.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "tx": {
          "$ref": "#/definitions/ethereumTransaction",
          "title": "Transaction"
        },
        "receipt": {
          "$ref": "#/definitions/ethereumReceipt",
          "title": "Receipt of the transaction"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/errorError"
          },
          "title": "Errors encountered while orchestrating the transaction"
        },
        "args": {
          "$ref": "#/definitions/envelopeArgs",
          "title": "Arguments provided by user"
        },
        "metadata": {
          "$ref": "#/definitions/envelopeMetadata",
          "title": "Metadata of the envelope"
        }
      },
      "title": "Envelope wraps all information contextual to the transaction orchestrated"
    },
    "envelopeMetadata": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "ID of the Envelope in UUID RFC 4122, ISO/IEC 9834-8:2005 format\ne.g a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra information (optional)"
        }
      },
      "title": "Metadata attached to an Envelope"
    },
    "envelopestoreLoadPendingResponse": {
      "type": "object",
      "properties": {
        "responses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/envelopestoreStoreResponse"
          },
          "title": "Pending envelopes"
        }
      }
    },
    "envelopestoreStatus": {
      "type": "string",
      "enum": [
        "STORED",
        "PENDING",
        "MINED",
        "ERROR"
      ],
      "default": "STORED",
      "title": "Possible statuses for a transaction"
    },
    "envelopestoreStatusInfo": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/envelopestoreStatus",
          "title": "Status of Transaction"
        },
        "storedAt": {
          "type": "string",
          "format": "date-time",
          "title": "Date events for envelope"
        },
        "sentAt": {
          "type": "string",
          "format": "date-time"
        },
        "minedAt": {
          "type": "string",
          "format": "date-time"
        },
        "errorAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "envelopestoreStatusResponse": {
      "type": "object",
      "properties": {
        "status_info": {
          "$ref": "#/definitions/envelopestoreStatusInfo"
        }
      }
    },
    "envelopestoreStoreResponse": {
      "type": "object",
      "properties": {
        "envelope": {
          "$ref": "#/definitions/envelopeEnvelope",
          "title": "Envelope"
        },
        "status_info": {
          "$ref": "#/definitions/envelopestoreStatusInfo"
        }
      }
    },
    "errorError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "Error message"
        },
        "code": {
          "type": "string",
          "format": "uint64",
          "title": "Error Code of the error"
        },
        "component": {
          "type": "string",
          "title": "Component"
        },
        "extra": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Extra information"
        }
      },
      "title": "Error"
    },
    "ethereumAccount": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "format": "byte",
          "title": "Account address in hex format\ne.g. 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        }
      },
      "title": "Ethereum Log"
    },
    "ethereumData": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "format": "byte",
          "title": "Raw value of an Ethereum data\ne.g 0xaf23"
        }
      },
      "title": "Ethereum Data"
    },
    "ethereumHash": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "format": "byte",
          "title": "Raw value of a hash"
        }
      },
      "title": "Ethereum Hash"
    },
    "ethereumLog": {
      "type": "object",
      "properties": {
        "address": {
          "$ref": "#/definitions/ethereumAccount",
          "title": "DATA (20 Bytes) - Address from which log originated\ne.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "topics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ethereumHash"
          },
          "title": "Array of DATA (32 Bytes) - Array of 0 to 4 indexed log arguments\ne.g. 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "DATA - Non-indexed arguments of the log"
        },
        "event": {
          "type": "string",
          "title": "Log decoded data"
        },
        "decoded_data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "block_number": {
          "type": "string",
          "format": "uint64",
          "title": "QUANTITY - Block number where this transaction was in"
        },
        "tx_hash": {
          "$ref": "#/definitions/ethereumHash",
          "title": "DATA (32 Bytes) - Hash of the transaction.\ne.g. 0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e"
        },
        "tx_index": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Integer of the transactions index position in the block."
        },
        "block_hash": {
          "$ref": "#/definitions/ethereumHash",
          "title": "DATA (32 Bytes) - Hash of the block where this transaction was in.\ne.g. 0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"
        },
        "index": {
          "type": "string",
          "format": "uint64",
          "title": "QUANTITY - Integer of the log index position in the block"
        },
        "removed": {
          "type": "boolean",
          "format": "boolean",
          "description": "Removed field is true if this log was reverted due to a chain reorganisation."
        }
      },
      "title": "Ethereum Log"
    },
    "ethereumQuantity": {
      "type": "object",
      "properties": {
        "raw": {
          "type": "string",
          "format": "byte",
          "title": "Raw value of the quantity\ne.g 0xaf23"
        }
      },
      "title": "Ethereum Hash"
    },
    "ethereumReceipt": {
      "type": "object",
      "properties": {
        "tx_hash": {
          "$ref": "#/definitions/ethereumHash",
          "title": "HASH (32 Bytes) - Hash of the transaction.\ne.g 0x3b198bfd5d2907285af009e9ae84a0ecd63677110d89d7e030251acb87f6487e"
        },
        "block_hash": {
          "$ref": "#/definitions/ethereumHash",
          "title": "HASH (32 Bytes) - Hash of the block where this transaction was in.\ne.g. 0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"
        },
        "block_number": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Block number where this transaction was in."
        },
        "tx_index": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Integer of the transactions index position in the block."
        },
        "contract_address": {
          "$ref": "#/definitions/ethereumAccount",
          "title": "DATA (20 Bytes) - The contract address created, if the transaction was a contract creation\ne.g 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "post_state": {
          "type": "string",
          "format": "byte",
          "title": "DATA (32 Bytes) - State root hash after executing transaction\ne.g. 0x656c34545f90a730a19008c0e7a7cd4fb3895064b48d6d69761bd5abad681056"
        },
        "status": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - 0 indicates transaction failure , 1 indicates transaction success."
        },
        "bloom": {
          "type": "string",
          "format": "byte",
          "description": "DATA (256 Bytes) - Bloom filter of logs/events generated by contracts during transaction execution."
        },
        "logs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ethereumLog"
          },
          "description": "Array - Array of log objects, which this transaction generated."
        },
        "gas_used": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - The amount of gas used by this specific transaction alone."
        },
        "cumulative_gas_used": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - The total amount of gas used when this transaction was executed in the block."
        }
      },
      "title": "Transaction Receipt"
    },
    "ethereumTransaction": {
      "type": "object",
      "properties": {
        "tx_data": {
          "$ref": "#/definitions/ethereumTxData"
        },
        "raw": {
          "$ref": "#/definitions/ethereumData",
          "title": "DATA - The signed, RLP encoded transaction"
        },
        "hash": {
          "$ref": "#/definitions/ethereumHash",
          "title": "DATA (32 Bytes) - Hash of the transaction.\ne.g. 0x0a0cafa26ca3f411e6629e9e02c53f23713b0033d7a72e534136104b5447a210"
        }
      },
      "title": "Transaction"
    },
    "ethereumTxData": {
      "type": "object",
      "properties": {
        "nonce": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Integer of a nonce."
        },
        "to": {
          "$ref": "#/definitions/ethereumAccount",
          "title": "DATA (20 Bytes) - The address of the receiver. null when itâ€™s a contract creation transaction.\ne.g. 0xAf84242d70aE9D268E2bE3616ED497BA28A7b62C"
        },
        "value": {
          "$ref": "#/definitions/ethereumQuantity",
          "title": "QUANTITY - Integer of the value sent with this transaction.\ne.g 0xaf23"
        },
        "gas": {
          "type": "string",
          "format": "uint64",
          "description": "QUANTITY - Integer of the gas provided for the transaction execution."
        },
        "gas_price": {
          "$ref": "#/definitions/ethereumQuantity",
          "title": "QUANTITY - Integer of the gas price used for each paid gas.\ne.g 0xaf23b"
        },
        "data": {
          "$ref": "#/definitions/ethereumData",
          "title": "DATA - Hash of the method signature (4 bytes) followed by encoded parameters.\ne.g 0xa9059cbb000000000000000000000000ff778b716fc07d98839f48ddb88d8be583beb684000000000000000000000000000000000000000000000000002386f26fc10000"
        }
      },
      "title": "Transaction data"
    }
  },
  "externalDocs": {
    "description": "ðŸ“’ Documentation of PegaSys Orchestrate",
    "url": "https://docs.orchestrate.pegasys.tech/en/latest/"
  }
}
