// Code generated by MockGen. DO NOT EDIT.
// Source: create_session.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	entities0 "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/tx-sentry/entities"
	reflect "reflect"
)

// MockCreateSessionUseCase is a mock of CreateSessionUseCase interface
type MockCreateSessionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateSessionUseCaseMockRecorder
}

// MockCreateSessionUseCaseMockRecorder is the mock recorder for MockCreateSessionUseCase
type MockCreateSessionUseCaseMockRecorder struct {
	mock *MockCreateSessionUseCase
}

// NewMockCreateSessionUseCase creates a new mock instance
func NewMockCreateSessionUseCase(ctrl *gomock.Controller) *MockCreateSessionUseCase {
	mock := &MockCreateSessionUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateSessionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateSessionUseCase) EXPECT() *MockCreateSessionUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateSessionUseCase) Execute(ctx context.Context, job *entities.Job) *entities0.JobSession {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(*entities0.JobSession)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockCreateSessionUseCaseMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateSessionUseCase)(nil).Execute), ctx, job)
}
