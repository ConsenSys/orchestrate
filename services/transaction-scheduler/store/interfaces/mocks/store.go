// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	interfaces "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/store/interfaces"
	models "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/store/models"
	reflect "reflect"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockStore) Connect(ctx context.Context, conf interface{}) (interfaces.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx, conf)
	ret0, _ := ret[0].(interfaces.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect.
func (mr *MockStoreMockRecorder) Connect(ctx, conf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockStore)(nil).Connect), ctx, conf)
}

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockDB) Begin() (interfaces.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(interfaces.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// TransactionRequest mocks base method.
func (m *MockDB) TransactionRequest() interfaces.TransactionRequestAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRequest")
	ret0, _ := ret[0].(interfaces.TransactionRequestAgent)
	return ret0
}

// TransactionRequest indicates an expected call of TransactionRequest.
func (mr *MockDBMockRecorder) TransactionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRequest", reflect.TypeOf((*MockDB)(nil).TransactionRequest))
}

// Schedule mocks base method.
func (m *MockDB) Schedule() interfaces.ScheduleAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(interfaces.ScheduleAgent)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockDBMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockDB)(nil).Schedule))
}

// Job mocks base method.
func (m *MockDB) Job() interfaces.JobAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(interfaces.JobAgent)
	return ret0
}

// Job indicates an expected call of Job.
func (mr *MockDBMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockDB)(nil).Job))
}

// Log mocks base method.
func (m *MockDB) Log() interfaces.LogAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(interfaces.LogAgent)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockDBMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockDB)(nil).Log))
}

// MockTx is a mock of Tx interface.
type MockTx struct {
	ctrl     *gomock.Controller
	recorder *MockTxMockRecorder
}

// MockTxMockRecorder is the mock recorder for MockTx.
type MockTxMockRecorder struct {
	mock *MockTx
}

// NewMockTx creates a new mock instance.
func NewMockTx(ctrl *gomock.Controller) *MockTx {
	mock := &MockTx{ctrl: ctrl}
	mock.recorder = &MockTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTx) EXPECT() *MockTxMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTx)(nil).Commit))
}

// TransactionRequest mocks base method.
func (m *MockTx) TransactionRequest() interfaces.TransactionRequestAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRequest")
	ret0, _ := ret[0].(interfaces.TransactionRequestAgent)
	return ret0
}

// TransactionRequest indicates an expected call of TransactionRequest.
func (mr *MockTxMockRecorder) TransactionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRequest", reflect.TypeOf((*MockTx)(nil).TransactionRequest))
}

// Schedule mocks base method.
func (m *MockTx) Schedule() interfaces.ScheduleAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(interfaces.ScheduleAgent)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockTxMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockTx)(nil).Schedule))
}

// Job mocks base method.
func (m *MockTx) Job() interfaces.JobAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(interfaces.JobAgent)
	return ret0
}

// Job indicates an expected call of Job.
func (mr *MockTxMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockTx)(nil).Job))
}

// Log mocks base method.
func (m *MockTx) Log() interfaces.LogAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(interfaces.LogAgent)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockTxMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockTx)(nil).Log))
}

// MockAgents is a mock of Agents interface.
type MockAgents struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsMockRecorder
}

// MockAgentsMockRecorder is the mock recorder for MockAgents.
type MockAgentsMockRecorder struct {
	mock *MockAgents
}

// NewMockAgents creates a new mock instance.
func NewMockAgents(ctrl *gomock.Controller) *MockAgents {
	mock := &MockAgents{ctrl: ctrl}
	mock.recorder = &MockAgentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgents) EXPECT() *MockAgentsMockRecorder {
	return m.recorder
}

// TransactionRequest mocks base method.
func (m *MockAgents) TransactionRequest() interfaces.TransactionRequestAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRequest")
	ret0, _ := ret[0].(interfaces.TransactionRequestAgent)
	return ret0
}

// TransactionRequest indicates an expected call of TransactionRequest.
func (mr *MockAgentsMockRecorder) TransactionRequest() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRequest", reflect.TypeOf((*MockAgents)(nil).TransactionRequest))
}

// Schedule mocks base method.
func (m *MockAgents) Schedule() interfaces.ScheduleAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(interfaces.ScheduleAgent)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockAgentsMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockAgents)(nil).Schedule))
}

// Job mocks base method.
func (m *MockAgents) Job() interfaces.JobAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Job")
	ret0, _ := ret[0].(interfaces.JobAgent)
	return ret0
}

// Job indicates an expected call of Job.
func (mr *MockAgentsMockRecorder) Job() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Job", reflect.TypeOf((*MockAgents)(nil).Job))
}

// Log mocks base method.
func (m *MockAgents) Log() interfaces.LogAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log")
	ret0, _ := ret[0].(interfaces.LogAgent)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockAgentsMockRecorder) Log() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockAgents)(nil).Log))
}

// MockTransactionRequestAgent is a mock of TransactionRequestAgent interface.
type MockTransactionRequestAgent struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRequestAgentMockRecorder
}

// MockTransactionRequestAgentMockRecorder is the mock recorder for MockTransactionRequestAgent.
type MockTransactionRequestAgentMockRecorder struct {
	mock *MockTransactionRequestAgent
}

// NewMockTransactionRequestAgent creates a new mock instance.
func NewMockTransactionRequestAgent(ctrl *gomock.Controller) *MockTransactionRequestAgent {
	mock := &MockTransactionRequestAgent{ctrl: ctrl}
	mock.recorder = &MockTransactionRequestAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRequestAgent) EXPECT() *MockTransactionRequestAgentMockRecorder {
	return m.recorder
}

// SelectOrInsert mocks base method.
func (m *MockTransactionRequestAgent) SelectOrInsert(ctx context.Context, txRequest *models.TransactionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectOrInsert", ctx, txRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectOrInsert indicates an expected call of SelectOrInsert.
func (mr *MockTransactionRequestAgentMockRecorder) SelectOrInsert(ctx, txRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectOrInsert", reflect.TypeOf((*MockTransactionRequestAgent)(nil).SelectOrInsert), ctx, txRequest)
}

// FindOneByIdempotencyKey mocks base method.
func (m *MockTransactionRequestAgent) FindOneByIdempotencyKey(ctx context.Context, idempotencyKey string) (*models.TransactionRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByIdempotencyKey", ctx, idempotencyKey)
	ret0, _ := ret[0].(*models.TransactionRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByIdempotencyKey indicates an expected call of FindOneByIdempotencyKey.
func (mr *MockTransactionRequestAgentMockRecorder) FindOneByIdempotencyKey(ctx, idempotencyKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByIdempotencyKey", reflect.TypeOf((*MockTransactionRequestAgent)(nil).FindOneByIdempotencyKey), ctx, idempotencyKey)
}

// MockScheduleAgent is a mock of ScheduleAgent interface.
type MockScheduleAgent struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleAgentMockRecorder
}

// MockScheduleAgentMockRecorder is the mock recorder for MockScheduleAgent.
type MockScheduleAgentMockRecorder struct {
	mock *MockScheduleAgent
}

// NewMockScheduleAgent creates a new mock instance.
func NewMockScheduleAgent(ctrl *gomock.Controller) *MockScheduleAgent {
	mock := &MockScheduleAgent{ctrl: ctrl}
	mock.recorder = &MockScheduleAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleAgent) EXPECT() *MockScheduleAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockScheduleAgent) Insert(ctx context.Context, schedule *models.Schedule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, schedule)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockScheduleAgentMockRecorder) Insert(ctx, schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockScheduleAgent)(nil).Insert), ctx, schedule)
}

// FindOneByUUID mocks base method.
func (m *MockScheduleAgent) FindOneByUUID(ctx context.Context, scheduleUUID, tenantID string) (*models.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, scheduleUUID, tenantID)
	ret0, _ := ret[0].(*models.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID.
func (mr *MockScheduleAgentMockRecorder) FindOneByUUID(ctx, scheduleUUID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockScheduleAgent)(nil).FindOneByUUID), ctx, scheduleUUID, tenantID)
}

// MockJobAgent is a mock of JobAgent interface.
type MockJobAgent struct {
	ctrl     *gomock.Controller
	recorder *MockJobAgentMockRecorder
}

// MockJobAgentMockRecorder is the mock recorder for MockJobAgent.
type MockJobAgentMockRecorder struct {
	mock *MockJobAgent
}

// NewMockJobAgent creates a new mock instance.
func NewMockJobAgent(ctrl *gomock.Controller) *MockJobAgent {
	mock := &MockJobAgent{ctrl: ctrl}
	mock.recorder = &MockJobAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobAgent) EXPECT() *MockJobAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockJobAgent) Insert(ctx context.Context, job *models.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockJobAgentMockRecorder) Insert(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockJobAgent)(nil).Insert), ctx, job)
}

// FindOneByUUID mocks base method.
func (m *MockJobAgent) FindOneByUUID(ctx context.Context, jobUUID, tenantID string) (*models.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByUUID", ctx, jobUUID, tenantID)
	ret0, _ := ret[0].(*models.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByUUID indicates an expected call of FindOneByUUID.
func (mr *MockJobAgentMockRecorder) FindOneByUUID(ctx, jobUUID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByUUID", reflect.TypeOf((*MockJobAgent)(nil).FindOneByUUID), ctx, jobUUID, tenantID)
}

// MockLogAgent is a mock of LogAgent interface.
type MockLogAgent struct {
	ctrl     *gomock.Controller
	recorder *MockLogAgentMockRecorder
}

// MockLogAgentMockRecorder is the mock recorder for MockLogAgent.
type MockLogAgentMockRecorder struct {
	mock *MockLogAgent
}

// NewMockLogAgent creates a new mock instance.
func NewMockLogAgent(ctrl *gomock.Controller) *MockLogAgent {
	mock := &MockLogAgent{ctrl: ctrl}
	mock.recorder = &MockLogAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogAgent) EXPECT() *MockLogAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockLogAgent) Insert(ctx context.Context, log *models.Log) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockLogAgentMockRecorder) Insert(ctx, log interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockLogAgent)(nil).Insert), ctx, log)
}
