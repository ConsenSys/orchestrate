// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/types"
	reflect "reflect"
)

// MockTransactionSchedulerClient is a mock of TransactionSchedulerClient interface.
type MockTransactionSchedulerClient struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionSchedulerClientMockRecorder
}

// MockTransactionSchedulerClientMockRecorder is the mock recorder for MockTransactionSchedulerClient.
type MockTransactionSchedulerClientMockRecorder struct {
	mock *MockTransactionSchedulerClient
}

// NewMockTransactionSchedulerClient creates a new mock instance.
func NewMockTransactionSchedulerClient(ctrl *gomock.Controller) *MockTransactionSchedulerClient {
	mock := &MockTransactionSchedulerClient{ctrl: ctrl}
	mock.recorder = &MockTransactionSchedulerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionSchedulerClient) EXPECT() *MockTransactionSchedulerClientMockRecorder {
	return m.recorder
}

// SendTransaction mocks base method.
func (m *MockTransactionSchedulerClient) SendTransaction(ctx context.Context, txRequest *types.TransactionRequest) (*types.TransactionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", ctx, txRequest)
	ret0, _ := ret[0].(*types.TransactionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendTransaction indicates an expected call of SendTransaction.
func (mr *MockTransactionSchedulerClientMockRecorder) SendTransaction(ctx, txRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockTransactionSchedulerClient)(nil).SendTransaction), ctx, txRequest)
}

// GetSchedule mocks base method.
func (m *MockTransactionSchedulerClient) GetSchedule(ctx context.Context, scheduleUUID string) (*types.ScheduleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchedule", ctx, scheduleUUID)
	ret0, _ := ret[0].(*types.ScheduleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSchedule indicates an expected call of GetSchedule.
func (mr *MockTransactionSchedulerClientMockRecorder) GetSchedule(ctx, scheduleUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchedule", reflect.TypeOf((*MockTransactionSchedulerClient)(nil).GetSchedule), ctx, scheduleUUID)
}
