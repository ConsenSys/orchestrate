// Code generated by MockGen. DO NOT EDIT.
// Source: schedules.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/types"
	reflect "reflect"
)

// MockScheduleValidator is a mock of ScheduleValidator interface.
type MockScheduleValidator struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleValidatorMockRecorder
}

// MockScheduleValidatorMockRecorder is the mock recorder for MockScheduleValidator.
type MockScheduleValidatorMockRecorder struct {
	mock *MockScheduleValidator
}

// NewMockScheduleValidator creates a new mock instance.
func NewMockScheduleValidator(ctrl *gomock.Controller) *MockScheduleValidator {
	mock := &MockScheduleValidator{ctrl: ctrl}
	mock.recorder = &MockScheduleValidatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleValidator) EXPECT() *MockScheduleValidatorMockRecorder {
	return m.recorder
}

// Validate mocks base method.
func (m *MockScheduleValidator) Validate(ctx context.Context, scheduleRequest *types.ScheduleRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", ctx, scheduleRequest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockScheduleValidatorMockRecorder) Validate(ctx, scheduleRequest interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockScheduleValidator)(nil).Validate), ctx, scheduleRequest)
}
