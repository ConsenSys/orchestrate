// Code generated by MockGen. DO NOT EDIT.
// Source: get_chain_by_name.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types"
	reflect "reflect"
)

// MockGetChainByNameUseCase is a mock of GetChainByNameUseCase interface
type MockGetChainByNameUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetChainByNameUseCaseMockRecorder
}

// MockGetChainByNameUseCaseMockRecorder is the mock recorder for MockGetChainByNameUseCase
type MockGetChainByNameUseCaseMockRecorder struct {
	mock *MockGetChainByNameUseCase
}

// NewMockGetChainByNameUseCase creates a new mock instance
func NewMockGetChainByNameUseCase(ctrl *gomock.Controller) *MockGetChainByNameUseCase {
	mock := &MockGetChainByNameUseCase{ctrl: ctrl}
	mock.recorder = &MockGetChainByNameUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetChainByNameUseCase) EXPECT() *MockGetChainByNameUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetChainByNameUseCase) Execute(ctx context.Context, chainName string, tenants []string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, chainName, tenants)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetChainByNameUseCaseMockRecorder) Execute(ctx, chainName, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetChainByNameUseCase)(nil).Execute), ctx, chainName, tenants)
}
