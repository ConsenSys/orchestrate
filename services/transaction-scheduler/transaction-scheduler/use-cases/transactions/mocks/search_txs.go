// Code generated by MockGen. DO NOT EDIT.
// Source: search_txs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/entities"
	reflect "reflect"
)

// MockSearchTransactionsUseCase is a mock of SearchTransactionsUseCase interface
type MockSearchTransactionsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchTransactionsUseCaseMockRecorder
}

// MockSearchTransactionsUseCaseMockRecorder is the mock recorder for MockSearchTransactionsUseCase
type MockSearchTransactionsUseCaseMockRecorder struct {
	mock *MockSearchTransactionsUseCase
}

// NewMockSearchTransactionsUseCase creates a new mock instance
func NewMockSearchTransactionsUseCase(ctrl *gomock.Controller) *MockSearchTransactionsUseCase {
	mock := &MockSearchTransactionsUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchTransactionsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchTransactionsUseCase) EXPECT() *MockSearchTransactionsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSearchTransactionsUseCase) Execute(ctx context.Context, filters *entities.TransactionFilters, tenantID string) ([]*entities.TxRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, filters, tenantID)
	ret0, _ := ret[0].([]*entities.TxRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSearchTransactionsUseCaseMockRecorder) Execute(ctx, filters, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSearchTransactionsUseCase)(nil).Execute), ctx, filters, tenantID)
}
