// Code generated by MockGen. DO NOT EDIT.
// Source: get_tx.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	reflect "reflect"
)

// MockGetTxUseCase is a mock of GetTxUseCase interface
type MockGetTxUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetTxUseCaseMockRecorder
}

// MockGetTxUseCaseMockRecorder is the mock recorder for MockGetTxUseCase
type MockGetTxUseCaseMockRecorder struct {
	mock *MockGetTxUseCase
}

// NewMockGetTxUseCase creates a new mock instance
func NewMockGetTxUseCase(ctrl *gomock.Controller) *MockGetTxUseCase {
	mock := &MockGetTxUseCase{ctrl: ctrl}
	mock.recorder = &MockGetTxUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetTxUseCase) EXPECT() *MockGetTxUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetTxUseCase) Execute(ctx context.Context, txRequestUUID string, tenants []string) (*entities.TxRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, txRequestUUID, tenants)
	ret0, _ := ret[0].(*entities.TxRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetTxUseCaseMockRecorder) Execute(ctx, txRequestUUID, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetTxUseCase)(nil).Execute), ctx, txRequestUUID, tenants)
}
