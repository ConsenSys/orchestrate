// Code generated by MockGen. DO NOT EDIT.
// Source: start_tx_schedule.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/entities"
	reflect "reflect"
)

// MockStartTxScheduleUseCase is a mock of StartTxScheduleUseCase interface
type MockStartTxScheduleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStartTxScheduleUseCaseMockRecorder
}

// MockStartTxScheduleUseCaseMockRecorder is the mock recorder for MockStartTxScheduleUseCase
type MockStartTxScheduleUseCaseMockRecorder struct {
	mock *MockStartTxScheduleUseCase
}

// NewMockStartTxScheduleUseCase creates a new mock instance
func NewMockStartTxScheduleUseCase(ctrl *gomock.Controller) *MockStartTxScheduleUseCase {
	mock := &MockStartTxScheduleUseCase{ctrl: ctrl}
	mock.recorder = &MockStartTxScheduleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStartTxScheduleUseCase) EXPECT() *MockStartTxScheduleUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockStartTxScheduleUseCase) Execute(ctx context.Context, txRequest *entities.TxRequest, txJob *types.Job, tenantID string) (*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, txRequest, txJob, tenantID)
	ret0, _ := ret[0].(*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockStartTxScheduleUseCaseMockRecorder) Execute(ctx, txRequest, txJob, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStartTxScheduleUseCase)(nil).Execute), ctx, txRequest, txJob, tenantID)
}
