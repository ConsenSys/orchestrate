// Code generated by MockGen. DO NOT EDIT.
// Source: search_schedules.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/entities"
	reflect "reflect"
)

// MockSearchSchedulesUseCase is a mock of SearchSchedulesUseCase interface
type MockSearchSchedulesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockSearchSchedulesUseCaseMockRecorder
}

// MockSearchSchedulesUseCaseMockRecorder is the mock recorder for MockSearchSchedulesUseCase
type MockSearchSchedulesUseCaseMockRecorder struct {
	mock *MockSearchSchedulesUseCase
}

// NewMockSearchSchedulesUseCase creates a new mock instance
func NewMockSearchSchedulesUseCase(ctrl *gomock.Controller) *MockSearchSchedulesUseCase {
	mock := &MockSearchSchedulesUseCase{ctrl: ctrl}
	mock.recorder = &MockSearchSchedulesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSearchSchedulesUseCase) EXPECT() *MockSearchSchedulesUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockSearchSchedulesUseCase) Execute(ctx context.Context, tenants []string) ([]*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, tenants)
	ret0, _ := ret[0].([]*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockSearchSchedulesUseCaseMockRecorder) Execute(ctx, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockSearchSchedulesUseCase)(nil).Execute), ctx, tenants)
}
