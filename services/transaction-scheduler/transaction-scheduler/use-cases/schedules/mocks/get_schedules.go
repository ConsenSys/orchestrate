// Code generated by MockGen. DO NOT EDIT.
// Source: get_schedules.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/entities"
	reflect "reflect"
)

// MockGetSchedulesUseCase is a mock of GetSchedulesUseCase interface
type MockGetSchedulesUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetSchedulesUseCaseMockRecorder
}

// MockGetSchedulesUseCaseMockRecorder is the mock recorder for MockGetSchedulesUseCase
type MockGetSchedulesUseCaseMockRecorder struct {
	mock *MockGetSchedulesUseCase
}

// NewMockGetSchedulesUseCase creates a new mock instance
func NewMockGetSchedulesUseCase(ctrl *gomock.Controller) *MockGetSchedulesUseCase {
	mock := &MockGetSchedulesUseCase{ctrl: ctrl}
	mock.recorder = &MockGetSchedulesUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetSchedulesUseCase) EXPECT() *MockGetSchedulesUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockGetSchedulesUseCase) Execute(ctx context.Context, tenants []string) ([]*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, tenants)
	ret0, _ := ret[0].([]*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockGetSchedulesUseCaseMockRecorder) Execute(ctx, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetSchedulesUseCase)(nil).Execute), ctx, tenants)
}
