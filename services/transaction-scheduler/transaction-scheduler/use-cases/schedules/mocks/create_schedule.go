// Code generated by MockGen. DO NOT EDIT.
// Source: create_schedule.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	store "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/store"
	schedules "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/use-cases/schedules"
	reflect "reflect"
)

// MockCreateScheduleUseCase is a mock of CreateScheduleUseCase interface
type MockCreateScheduleUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateScheduleUseCaseMockRecorder
}

// MockCreateScheduleUseCaseMockRecorder is the mock recorder for MockCreateScheduleUseCase
type MockCreateScheduleUseCaseMockRecorder struct {
	mock *MockCreateScheduleUseCase
}

// NewMockCreateScheduleUseCase creates a new mock instance
func NewMockCreateScheduleUseCase(ctrl *gomock.Controller) *MockCreateScheduleUseCase {
	mock := &MockCreateScheduleUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateScheduleUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateScheduleUseCase) EXPECT() *MockCreateScheduleUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateScheduleUseCase) Execute(ctx context.Context, schedule *entities.Schedule) (*entities.Schedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, schedule)
	ret0, _ := ret[0].(*entities.Schedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateScheduleUseCaseMockRecorder) Execute(ctx, schedule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateScheduleUseCase)(nil).Execute), ctx, schedule)
}

// WithDBTransaction mocks base method
func (m *MockCreateScheduleUseCase) WithDBTransaction(dbtx store.Tx) schedules.CreateScheduleUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDBTransaction", dbtx)
	ret0, _ := ret[0].(schedules.CreateScheduleUseCase)
	return ret0
}

// WithDBTransaction indicates an expected call of WithDBTransaction
func (mr *MockCreateScheduleUseCaseMockRecorder) WithDBTransaction(dbtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDBTransaction", reflect.TypeOf((*MockCreateScheduleUseCase)(nil).WithDBTransaction), dbtx)
}
