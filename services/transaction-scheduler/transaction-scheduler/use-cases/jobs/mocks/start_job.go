// Code generated by MockGen. DO NOT EDIT.
// Source: start_job.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStartJobUseCase is a mock of StartJobUseCase interface
type MockStartJobUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStartJobUseCaseMockRecorder
}

// MockStartJobUseCaseMockRecorder is the mock recorder for MockStartJobUseCase
type MockStartJobUseCaseMockRecorder struct {
	mock *MockStartJobUseCase
}

// NewMockStartJobUseCase creates a new mock instance
func NewMockStartJobUseCase(ctrl *gomock.Controller) *MockStartJobUseCase {
	mock := &MockStartJobUseCase{ctrl: ctrl}
	mock.recorder = &MockStartJobUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStartJobUseCase) EXPECT() *MockStartJobUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockStartJobUseCase) Execute(ctx context.Context, jobUUID, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, jobUUID, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockStartJobUseCaseMockRecorder) Execute(ctx, jobUUID, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStartJobUseCase)(nil).Execute), ctx, jobUUID, tenantID)
}
