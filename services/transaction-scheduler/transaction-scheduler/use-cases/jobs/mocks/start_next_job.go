// Code generated by MockGen. DO NOT EDIT.
// Source: start_next_job.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStartNextJobUseCase is a mock of StartNextJobUseCase interface
type MockStartNextJobUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStartNextJobUseCaseMockRecorder
}

// MockStartNextJobUseCaseMockRecorder is the mock recorder for MockStartNextJobUseCase
type MockStartNextJobUseCaseMockRecorder struct {
	mock *MockStartNextJobUseCase
}

// NewMockStartNextJobUseCase creates a new mock instance
func NewMockStartNextJobUseCase(ctrl *gomock.Controller) *MockStartNextJobUseCase {
	mock := &MockStartNextJobUseCase{ctrl: ctrl}
	mock.recorder = &MockStartNextJobUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStartNextJobUseCase) EXPECT() *MockStartNextJobUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockStartNextJobUseCase) Execute(ctx context.Context, prevJobUUID string, tenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, prevJobUUID, tenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockStartNextJobUseCaseMockRecorder) Execute(ctx, prevJobUUID, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockStartNextJobUseCase)(nil).Execute), ctx, prevJobUUID, tenants)
}
