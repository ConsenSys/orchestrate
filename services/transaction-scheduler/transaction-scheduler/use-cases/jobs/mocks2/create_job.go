// Code generated by MockGen. DO NOT EDIT.
// Source: create_job.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	store "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/store"
	jobs "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/use-cases/jobs"
	reflect "reflect"
)

// MockCreateJobUseCase is a mock of CreateJobUseCase interface
type MockCreateJobUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateJobUseCaseMockRecorder
}

// MockCreateJobUseCaseMockRecorder is the mock recorder for MockCreateJobUseCase
type MockCreateJobUseCaseMockRecorder struct {
	mock *MockCreateJobUseCase
}

// NewMockCreateJobUseCase creates a new mock instance
func NewMockCreateJobUseCase(ctrl *gomock.Controller) *MockCreateJobUseCase {
	mock := &MockCreateJobUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateJobUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateJobUseCase) EXPECT() *MockCreateJobUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateJobUseCase) Execute(ctx context.Context, job *entities.Job, tenants []string) (*entities.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job, tenants)
	ret0, _ := ret[0].(*entities.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateJobUseCaseMockRecorder) Execute(ctx, job, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateJobUseCase)(nil).Execute), ctx, job, tenants)
}

// WithDBTransaction mocks base method
func (m *MockCreateJobUseCase) WithDBTransaction(dbtx store.Tx) jobs.CreateJobUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDBTransaction", dbtx)
	ret0, _ := ret[0].(jobs.CreateJobUseCase)
	return ret0
}

// WithDBTransaction indicates an expected call of WithDBTransaction
func (mr *MockCreateJobUseCaseMockRecorder) WithDBTransaction(dbtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDBTransaction", reflect.TypeOf((*MockCreateJobUseCase)(nil).WithDBTransaction), dbtx)
}
