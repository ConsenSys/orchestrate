// Code generated by MockGen. DO NOT EDIT.
// Source: update_children.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	store "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/store"
	sub_use_cases "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/transaction-scheduler/transaction-scheduler/use-cases/jobs/sub-use-cases"
	reflect "reflect"
)

// MockUpdateChildrenUseCase is a mock of UpdateChildrenUseCase interface
type MockUpdateChildrenUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateChildrenUseCaseMockRecorder
}

// MockUpdateChildrenUseCaseMockRecorder is the mock recorder for MockUpdateChildrenUseCase
type MockUpdateChildrenUseCaseMockRecorder struct {
	mock *MockUpdateChildrenUseCase
}

// NewMockUpdateChildrenUseCase creates a new mock instance
func NewMockUpdateChildrenUseCase(ctrl *gomock.Controller) *MockUpdateChildrenUseCase {
	mock := &MockUpdateChildrenUseCase{ctrl: ctrl}
	mock.recorder = &MockUpdateChildrenUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUpdateChildrenUseCase) EXPECT() *MockUpdateChildrenUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockUpdateChildrenUseCase) Execute(ctx context.Context, jobUUID, parentJobUUID, status string, tenants []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, jobUUID, parentJobUUID, status, tenants)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockUpdateChildrenUseCaseMockRecorder) Execute(ctx, jobUUID, parentJobUUID, status, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUpdateChildrenUseCase)(nil).Execute), ctx, jobUUID, parentJobUUID, status, tenants)
}

// WithDBTransaction mocks base method
func (m *MockUpdateChildrenUseCase) WithDBTransaction(dbtx store.Tx) sub_use_cases.UpdateChildrenUseCase {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithDBTransaction", dbtx)
	ret0, _ := ret[0].(sub_use_cases.UpdateChildrenUseCase)
	return ret0
}

// WithDBTransaction indicates an expected call of WithDBTransaction
func (mr *MockUpdateChildrenUseCaseMockRecorder) WithDBTransaction(dbtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithDBTransaction", reflect.TypeOf((*MockUpdateChildrenUseCase)(nil).WithDBTransaction), dbtx)
}
