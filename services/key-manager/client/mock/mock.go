// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	healthcheck "github.com/heptiolabs/healthcheck"
	ethereum "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/keymanager/ethereum"
	reflect "reflect"
)

// MockEthereumAccountClient is a mock of EthereumAccountClient interface
type MockEthereumAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockEthereumAccountClientMockRecorder
}

// MockEthereumAccountClientMockRecorder is the mock recorder for MockEthereumAccountClient
type MockEthereumAccountClientMockRecorder struct {
	mock *MockEthereumAccountClient
}

// NewMockEthereumAccountClient creates a new mock instance
func NewMockEthereumAccountClient(ctrl *gomock.Controller) *MockEthereumAccountClient {
	mock := &MockEthereumAccountClient{ctrl: ctrl}
	mock.recorder = &MockEthereumAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthereumAccountClient) EXPECT() *MockEthereumAccountClientMockRecorder {
	return m.recorder
}

// CreateETHAccount mocks base method
func (m *MockEthereumAccountClient) CreateETHAccount(ctx context.Context, request *ethereum.CreateETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateETHAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateETHAccount indicates an expected call of CreateETHAccount
func (mr *MockEthereumAccountClientMockRecorder) CreateETHAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateETHAccount", reflect.TypeOf((*MockEthereumAccountClient)(nil).CreateETHAccount), ctx, request)
}

// ImportETHAccount mocks base method
func (m *MockEthereumAccountClient) ImportETHAccount(ctx context.Context, request *ethereum.ImportETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportETHAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportETHAccount indicates an expected call of ImportETHAccount
func (mr *MockEthereumAccountClientMockRecorder) ImportETHAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportETHAccount", reflect.TypeOf((*MockEthereumAccountClient)(nil).ImportETHAccount), ctx, request)
}

// MockKeyManagerClient is a mock of KeyManagerClient interface
type MockKeyManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockKeyManagerClientMockRecorder
}

// MockKeyManagerClientMockRecorder is the mock recorder for MockKeyManagerClient
type MockKeyManagerClientMockRecorder struct {
	mock *MockKeyManagerClient
}

// NewMockKeyManagerClient creates a new mock instance
func NewMockKeyManagerClient(ctrl *gomock.Controller) *MockKeyManagerClient {
	mock := &MockKeyManagerClient{ctrl: ctrl}
	mock.recorder = &MockKeyManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyManagerClient) EXPECT() *MockKeyManagerClientMockRecorder {
	return m.recorder
}

// Checker mocks base method
func (m *MockKeyManagerClient) Checker() healthcheck.Check {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(healthcheck.Check)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockKeyManagerClientMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockKeyManagerClient)(nil).Checker))
}

// CreateETHAccount mocks base method
func (m *MockKeyManagerClient) CreateETHAccount(ctx context.Context, request *ethereum.CreateETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateETHAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateETHAccount indicates an expected call of CreateETHAccount
func (mr *MockKeyManagerClientMockRecorder) CreateETHAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateETHAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).CreateETHAccount), ctx, request)
}

// ImportETHAccount mocks base method
func (m *MockKeyManagerClient) ImportETHAccount(ctx context.Context, request *ethereum.ImportETHAccountRequest) (*ethereum.ETHAccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportETHAccount", ctx, request)
	ret0, _ := ret[0].(*ethereum.ETHAccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportETHAccount indicates an expected call of ImportETHAccount
func (mr *MockKeyManagerClientMockRecorder) ImportETHAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportETHAccount", reflect.TypeOf((*MockKeyManagerClient)(nil).ImportETHAccount), ctx, request)
}
