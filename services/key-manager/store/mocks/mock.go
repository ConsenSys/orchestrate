// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	healthcheck "github.com/heptiolabs/healthcheck"
	store "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/key-manager/store"
	reflect "reflect"
)

// MockVault is a mock of Vault interface
type MockVault struct {
	ctrl     *gomock.Controller
	recorder *MockVaultMockRecorder
}

// MockVaultMockRecorder is the mock recorder for MockVault
type MockVaultMockRecorder struct {
	mock *MockVault
}

// NewMockVault creates a new mock instance
func NewMockVault(ctrl *gomock.Controller) *MockVault {
	mock := &MockVault{ctrl: ctrl}
	mock.recorder = &MockVaultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVault) EXPECT() *MockVaultMockRecorder {
	return m.recorder
}

// Ethereum mocks base method
func (m *MockVault) Ethereum() store.EthereumAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ethereum")
	ret0, _ := ret[0].(store.EthereumAgent)
	return ret0
}

// Ethereum indicates an expected call of Ethereum
func (mr *MockVaultMockRecorder) Ethereum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ethereum", reflect.TypeOf((*MockVault)(nil).Ethereum))
}

// HealthCheck mocks base method
func (m *MockVault) HealthCheck() healthcheck.Check {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck")
	ret0, _ := ret[0].(healthcheck.Check)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockVaultMockRecorder) HealthCheck() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVault)(nil).HealthCheck))
}

// MockAgents is a mock of Agents interface
type MockAgents struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsMockRecorder
}

// MockAgentsMockRecorder is the mock recorder for MockAgents
type MockAgentsMockRecorder struct {
	mock *MockAgents
}

// NewMockAgents creates a new mock instance
func NewMockAgents(ctrl *gomock.Controller) *MockAgents {
	mock := &MockAgents{ctrl: ctrl}
	mock.recorder = &MockAgentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgents) EXPECT() *MockAgentsMockRecorder {
	return m.recorder
}

// Ethereum mocks base method
func (m *MockAgents) Ethereum() store.EthereumAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ethereum")
	ret0, _ := ret[0].(store.EthereumAgent)
	return ret0
}

// Ethereum indicates an expected call of Ethereum
func (mr *MockAgentsMockRecorder) Ethereum() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ethereum", reflect.TypeOf((*MockAgents)(nil).Ethereum))
}

// MockEthereumAgent is a mock of EthereumAgent interface
type MockEthereumAgent struct {
	ctrl     *gomock.Controller
	recorder *MockEthereumAgentMockRecorder
}

// MockEthereumAgentMockRecorder is the mock recorder for MockEthereumAgent
type MockEthereumAgentMockRecorder struct {
	mock *MockEthereumAgent
}

// NewMockEthereumAgent creates a new mock instance
func NewMockEthereumAgent(ctrl *gomock.Controller) *MockEthereumAgent {
	mock := &MockEthereumAgent{ctrl: ctrl}
	mock.recorder = &MockEthereumAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockEthereumAgent) EXPECT() *MockEthereumAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockEthereumAgent) Insert(ctx context.Context, address, privKey, namespace string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, address, privKey, namespace)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockEthereumAgentMockRecorder) Insert(ctx, address, privKey, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockEthereumAgent)(nil).Insert), ctx, address, privKey, namespace)
}
