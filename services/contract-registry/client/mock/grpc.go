// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/contract-registry/proto (interfaces: ContractRegistryClient)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	proto "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/contract-registry/proto"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockContractRegistryClient is a mock of ContractRegistryClient interface.
type MockContractRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockContractRegistryClientMockRecorder
}

// MockContractRegistryClientMockRecorder is the mock recorder for MockContractRegistryClient.
type MockContractRegistryClientMockRecorder struct {
	mock *MockContractRegistryClient
}

// NewMockContractRegistryClient creates a new mock instance.
func NewMockContractRegistryClient(ctrl *gomock.Controller) *MockContractRegistryClient {
	mock := &MockContractRegistryClient{ctrl: ctrl}
	mock.recorder = &MockContractRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContractRegistryClient) EXPECT() *MockContractRegistryClientMockRecorder {
	return m.recorder
}

// DeleteArtifact mocks base method.
func (m *MockContractRegistryClient) DeleteArtifact(arg0 context.Context, arg1 *proto.DeleteArtifactRequest, arg2 ...grpc.CallOption) (*proto.DeleteArtifactResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteArtifact", varargs...)
	ret0, _ := ret[0].(*proto.DeleteArtifactResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteArtifact indicates an expected call of DeleteArtifact.
func (mr *MockContractRegistryClientMockRecorder) DeleteArtifact(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteArtifact", reflect.TypeOf((*MockContractRegistryClient)(nil).DeleteArtifact), varargs...)
}

// DeregisterContract mocks base method.
func (m *MockContractRegistryClient) DeregisterContract(arg0 context.Context, arg1 *proto.DeregisterContractRequest, arg2 ...grpc.CallOption) (*proto.DeregisterContractResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeregisterContract", varargs...)
	ret0, _ := ret[0].(*proto.DeregisterContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeregisterContract indicates an expected call of DeregisterContract.
func (mr *MockContractRegistryClientMockRecorder) DeregisterContract(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterContract", reflect.TypeOf((*MockContractRegistryClient)(nil).DeregisterContract), varargs...)
}

// GetCatalog mocks base method.
func (m *MockContractRegistryClient) GetCatalog(arg0 context.Context, arg1 *proto.GetCatalogRequest, arg2 ...grpc.CallOption) (*proto.GetCatalogResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCatalog", varargs...)
	ret0, _ := ret[0].(*proto.GetCatalogResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalog indicates an expected call of GetCatalog.
func (mr *MockContractRegistryClientMockRecorder) GetCatalog(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalog", reflect.TypeOf((*MockContractRegistryClient)(nil).GetCatalog), varargs...)
}

// GetContract mocks base method.
func (m *MockContractRegistryClient) GetContract(arg0 context.Context, arg1 *proto.GetContractRequest, arg2 ...grpc.CallOption) (*proto.GetContractResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContract", varargs...)
	ret0, _ := ret[0].(*proto.GetContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContract indicates an expected call of GetContract.
func (mr *MockContractRegistryClientMockRecorder) GetContract(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockContractRegistryClient)(nil).GetContract), varargs...)
}

// GetContractABI mocks base method.
func (m *MockContractRegistryClient) GetContractABI(arg0 context.Context, arg1 *proto.GetContractRequest, arg2 ...grpc.CallOption) (*proto.GetContractABIResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractABI", varargs...)
	ret0, _ := ret[0].(*proto.GetContractABIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractABI indicates an expected call of GetContractABI.
func (mr *MockContractRegistryClientMockRecorder) GetContractABI(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractABI", reflect.TypeOf((*MockContractRegistryClient)(nil).GetContractABI), varargs...)
}

// GetContractBytecode mocks base method.
func (m *MockContractRegistryClient) GetContractBytecode(arg0 context.Context, arg1 *proto.GetContractRequest, arg2 ...grpc.CallOption) (*proto.GetContractBytecodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractBytecode", varargs...)
	ret0, _ := ret[0].(*proto.GetContractBytecodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractBytecode indicates an expected call of GetContractBytecode.
func (mr *MockContractRegistryClientMockRecorder) GetContractBytecode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractBytecode", reflect.TypeOf((*MockContractRegistryClient)(nil).GetContractBytecode), varargs...)
}

// GetContractDeployedBytecode mocks base method.
func (m *MockContractRegistryClient) GetContractDeployedBytecode(arg0 context.Context, arg1 *proto.GetContractRequest, arg2 ...grpc.CallOption) (*proto.GetContractDeployedBytecodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContractDeployedBytecode", varargs...)
	ret0, _ := ret[0].(*proto.GetContractDeployedBytecodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContractDeployedBytecode indicates an expected call of GetContractDeployedBytecode.
func (mr *MockContractRegistryClientMockRecorder) GetContractDeployedBytecode(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContractDeployedBytecode", reflect.TypeOf((*MockContractRegistryClient)(nil).GetContractDeployedBytecode), varargs...)
}

// GetEventsBySigHash mocks base method.
func (m *MockContractRegistryClient) GetEventsBySigHash(arg0 context.Context, arg1 *proto.GetEventsBySigHashRequest, arg2 ...grpc.CallOption) (*proto.GetEventsBySigHashResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEventsBySigHash", varargs...)
	ret0, _ := ret[0].(*proto.GetEventsBySigHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsBySigHash indicates an expected call of GetEventsBySigHash.
func (mr *MockContractRegistryClientMockRecorder) GetEventsBySigHash(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsBySigHash", reflect.TypeOf((*MockContractRegistryClient)(nil).GetEventsBySigHash), varargs...)
}

// GetMethodsBySelector mocks base method.
func (m *MockContractRegistryClient) GetMethodsBySelector(arg0 context.Context, arg1 *proto.GetMethodsBySelectorRequest, arg2 ...grpc.CallOption) (*proto.GetMethodsBySelectorResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMethodsBySelector", varargs...)
	ret0, _ := ret[0].(*proto.GetMethodsBySelectorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMethodsBySelector indicates an expected call of GetMethodsBySelector.
func (mr *MockContractRegistryClientMockRecorder) GetMethodsBySelector(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMethodsBySelector", reflect.TypeOf((*MockContractRegistryClient)(nil).GetMethodsBySelector), varargs...)
}

// GetTags mocks base method.
func (m *MockContractRegistryClient) GetTags(arg0 context.Context, arg1 *proto.GetTagsRequest, arg2 ...grpc.CallOption) (*proto.GetTagsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTags", varargs...)
	ret0, _ := ret[0].(*proto.GetTagsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockContractRegistryClientMockRecorder) GetTags(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockContractRegistryClient)(nil).GetTags), varargs...)
}

// RegisterContract mocks base method.
func (m *MockContractRegistryClient) RegisterContract(arg0 context.Context, arg1 *proto.RegisterContractRequest, arg2 ...grpc.CallOption) (*proto.RegisterContractResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegisterContract", varargs...)
	ret0, _ := ret[0].(*proto.RegisterContractResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterContract indicates an expected call of RegisterContract.
func (mr *MockContractRegistryClientMockRecorder) RegisterContract(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterContract", reflect.TypeOf((*MockContractRegistryClient)(nil).RegisterContract), varargs...)
}

// SetAccountCodeHash mocks base method.
func (m *MockContractRegistryClient) SetAccountCodeHash(arg0 context.Context, arg1 *proto.SetAccountCodeHashRequest, arg2 ...grpc.CallOption) (*proto.SetAccountCodeHashResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetAccountCodeHash", varargs...)
	ret0, _ := ret[0].(*proto.SetAccountCodeHashResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetAccountCodeHash indicates an expected call of SetAccountCodeHash.
func (mr *MockContractRegistryClientMockRecorder) SetAccountCodeHash(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAccountCodeHash", reflect.TypeOf((*MockContractRegistryClient)(nil).SetAccountCodeHash), varargs...)
}
