// Code generated by MockGen. DO NOT EDIT.
// Source: register_contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	abi "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/abi"
	reflect "reflect"
)

// MockRegisterContractUseCase is a mock of RegisterContractUseCase interface
type MockRegisterContractUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterContractUseCaseMockRecorder
}

// MockRegisterContractUseCaseMockRecorder is the mock recorder for MockRegisterContractUseCase
type MockRegisterContractUseCaseMockRecorder struct {
	mock *MockRegisterContractUseCase
}

// NewMockRegisterContractUseCase creates a new mock instance
func NewMockRegisterContractUseCase(ctrl *gomock.Controller) *MockRegisterContractUseCase {
	mock := &MockRegisterContractUseCase{ctrl: ctrl}
	mock.recorder = &MockRegisterContractUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRegisterContractUseCase) EXPECT() *MockRegisterContractUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockRegisterContractUseCase) Execute(ctx context.Context, contract *abi.Contract) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, contract)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute
func (mr *MockRegisterContractUseCaseMockRecorder) Execute(ctx, contract interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegisterContractUseCase)(nil).Execute), ctx, contract)
}
