// Code generated by MockGen. DO NOT EDIT.
// Source: get_contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	abi "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/abi"
	reflect "reflect"
)

// MockGetContractUseCase is a mock of GetContractUseCase interface.
type MockGetContractUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetContractUseCaseMockRecorder
}

// MockGetContractUseCaseMockRecorder is the mock recorder for MockGetContractUseCase.
type MockGetContractUseCaseMockRecorder struct {
	mock *MockGetContractUseCase
}

// NewMockGetContractUseCase creates a new mock instance.
func NewMockGetContractUseCase(ctrl *gomock.Controller) *MockGetContractUseCase {
	mock := &MockGetContractUseCase{ctrl: ctrl}
	mock.recorder = &MockGetContractUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetContractUseCase) EXPECT() *MockGetContractUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetContractUseCase) Execute(ctx context.Context, id *abi.ContractId) (*abi.Contract, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, id)
	ret0, _ := ret[0].(*abi.Contract)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockGetContractUseCaseMockRecorder) Execute(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetContractUseCase)(nil).Execute), ctx, id)
}
