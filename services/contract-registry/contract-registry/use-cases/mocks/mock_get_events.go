// Code generated by MockGen. DO NOT EDIT.
// Source: get_events.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	common "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/common"
	reflect "reflect"
)

// MockGetEventsUseCase is a mock of GetEventsUseCase interface.
type MockGetEventsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetEventsUseCaseMockRecorder
}

// MockGetEventsUseCaseMockRecorder is the mock recorder for MockGetEventsUseCase.
type MockGetEventsUseCaseMockRecorder struct {
	mock *MockGetEventsUseCase
}

// NewMockGetEventsUseCase creates a new mock instance.
func NewMockGetEventsUseCase(ctrl *gomock.Controller) *MockGetEventsUseCase {
	mock := &MockGetEventsUseCase{ctrl: ctrl}
	mock.recorder = &MockGetEventsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetEventsUseCase) EXPECT() *MockGetEventsUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockGetEventsUseCase) Execute(ctx context.Context, account *common.AccountInstance, sighash string, indexedInputCount uint32) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, account, sighash, indexedInputCount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockGetEventsUseCaseMockRecorder) Execute(ctx, account, sighash, indexedInputCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockGetEventsUseCase)(nil).Execute), ctx, account, sighash, indexedInputCount)
}
