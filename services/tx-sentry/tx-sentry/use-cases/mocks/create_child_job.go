// Code generated by MockGen. DO NOT EDIT.
// Source: create_child_job.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	reflect "reflect"
)

// MockCreateChildJobUseCase is a mock of CreateChildJobUseCase interface
type MockCreateChildJobUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockCreateChildJobUseCaseMockRecorder
}

// MockCreateChildJobUseCaseMockRecorder is the mock recorder for MockCreateChildJobUseCase
type MockCreateChildJobUseCaseMockRecorder struct {
	mock *MockCreateChildJobUseCase
}

// NewMockCreateChildJobUseCase creates a new mock instance
func NewMockCreateChildJobUseCase(ctrl *gomock.Controller) *MockCreateChildJobUseCase {
	mock := &MockCreateChildJobUseCase{ctrl: ctrl}
	mock.recorder = &MockCreateChildJobUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCreateChildJobUseCase) EXPECT() *MockCreateChildJobUseCaseMockRecorder {
	return m.recorder
}

// Execute mocks base method
func (m *MockCreateChildJobUseCase) Execute(ctx context.Context, job *entities.Job) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, job)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute
func (mr *MockCreateChildJobUseCaseMockRecorder) Execute(ctx, job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockCreateChildJobUseCase)(nil).Execute), ctx, job)
}
