// Code generated by protoc-gen-go. DO NOT EDIT.
// source: services/faucet/faucet.proto

package faucet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	chain "gitlab.com/ConsenSys/client/fr/core-stack/pkg.git/types/chain"
	common "gitlab.com/ConsenSys/client/fr/core-stack/pkg.git/types/common"
	ethereum "gitlab.com/ConsenSys/client/fr/core-stack/pkg.git/types/ethereum"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreditRequest struct {
	// Chain to credit account on
	Chain *chain.Chain `protobuf:"bytes,1,opt,name=chain,proto3" json:"chain,omitempty"`
	// Beneficiary account that will be credited
	Beneficiary *ethereum.Account `protobuf:"bytes,2,opt,name=beneficiary,proto3" json:"beneficiary,omitempty"`
	// Creditor account that will credit
	Creditor *ethereum.Account `protobuf:"bytes,3,opt,name=creditor,proto3" json:"creditor,omitempty"`
	// Amount to be credited
	Amount               *ethereum.Quantity `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *CreditRequest) Reset()         { *m = CreditRequest{} }
func (m *CreditRequest) String() string { return proto.CompactTextString(m) }
func (*CreditRequest) ProtoMessage()    {}
func (*CreditRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21fcda3d723849d, []int{0}
}

func (m *CreditRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditRequest.Unmarshal(m, b)
}
func (m *CreditRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditRequest.Marshal(b, m, deterministic)
}
func (m *CreditRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditRequest.Merge(m, src)
}
func (m *CreditRequest) XXX_Size() int {
	return xxx_messageInfo_CreditRequest.Size(m)
}
func (m *CreditRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreditRequest proto.InternalMessageInfo

func (m *CreditRequest) GetChain() *chain.Chain {
	if m != nil {
		return m.Chain
	}
	return nil
}

func (m *CreditRequest) GetBeneficiary() *ethereum.Account {
	if m != nil {
		return m.Beneficiary
	}
	return nil
}

func (m *CreditRequest) GetCreditor() *ethereum.Account {
	if m != nil {
		return m.Creditor
	}
	return nil
}

func (m *CreditRequest) GetAmount() *ethereum.Quantity {
	if m != nil {
		return m.Amount
	}
	return nil
}

type CreditResponse struct {
	// Creditor that credited the account
	Creditor *ethereum.Account `protobuf:"bytes,1,opt,name=creditor,proto3" json:"creditor,omitempty"`
	// Amount credited
	Amount *ethereum.Quantity `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	// Error when crediting
	// In most cases it indicates the reason why a credit has not been granted
	Error                *common.Error `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CreditResponse) Reset()         { *m = CreditResponse{} }
func (m *CreditResponse) String() string { return proto.CompactTextString(m) }
func (*CreditResponse) ProtoMessage()    {}
func (*CreditResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_b21fcda3d723849d, []int{1}
}

func (m *CreditResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreditResponse.Unmarshal(m, b)
}
func (m *CreditResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreditResponse.Marshal(b, m, deterministic)
}
func (m *CreditResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreditResponse.Merge(m, src)
}
func (m *CreditResponse) XXX_Size() int {
	return xxx_messageInfo_CreditResponse.Size(m)
}
func (m *CreditResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreditResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreditResponse proto.InternalMessageInfo

func (m *CreditResponse) GetCreditor() *ethereum.Account {
	if m != nil {
		return m.Creditor
	}
	return nil
}

func (m *CreditResponse) GetAmount() *ethereum.Quantity {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *CreditResponse) GetError() *common.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func init() {
	proto.RegisterType((*CreditRequest)(nil), "faucet.CreditRequest")
	proto.RegisterType((*CreditResponse)(nil), "faucet.CreditResponse")
}

func init() { proto.RegisterFile("services/faucet/faucet.proto", fileDescriptor_b21fcda3d723849d) }

var fileDescriptor_b21fcda3d723849d = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0x41, 0x4b, 0xfb, 0x30,
	0x18, 0xc6, 0xff, 0xdd, 0xdf, 0x15, 0xc9, 0x9c, 0x60, 0x40, 0xad, 0xc3, 0x83, 0xd4, 0x8b, 0x08,
	0x4b, 0x60, 0x3b, 0x79, 0x11, 0xb5, 0xe8, 0xdd, 0x7a, 0xf3, 0x96, 0xc6, 0x77, 0x5b, 0xd8, 0x9a,
	0xd4, 0x24, 0x15, 0xfa, 0x2d, 0xfc, 0x4e, 0x7e, 0x31, 0x69, 0xde, 0x4e, 0x9d, 0x20, 0xe2, 0x25,
	0xa5, 0xcf, 0xf3, 0x4b, 0x9f, 0xbe, 0xef, 0x43, 0x8e, 0x1d, 0xd8, 0x17, 0x25, 0xc1, 0xf1, 0x99,
	0xa8, 0x25, 0xf8, 0xee, 0xc1, 0x2a, 0x6b, 0xbc, 0xa1, 0x31, 0xbe, 0x8d, 0x12, 0xdf, 0x54, 0xe0,
	0xb8, 0x34, 0x65, 0x69, 0x34, 0x07, 0x6b, 0x8d, 0x45, 0x62, 0x74, 0x84, 0x0e, 0xf8, 0x05, 0x58,
	0xa8, 0x4b, 0x5e, 0x08, 0x07, 0x9d, 0x75, 0xd8, 0x5d, 0x5a, 0x08, 0xa5, 0xf1, 0x44, 0x23, 0x7d,
	0x8b, 0xc8, 0x30, 0xb3, 0xf0, 0xa4, 0x7c, 0x0e, 0xcf, 0x35, 0x38, 0x4f, 0x53, 0xd2, 0x0f, 0x40,
	0x12, 0x9d, 0x44, 0x67, 0x83, 0xc9, 0x0e, 0x43, 0x3c, 0x6b, 0xcf, 0x1c, 0x2d, 0x3a, 0x25, 0x83,
	0x02, 0x34, 0xcc, 0x94, 0x54, 0xc2, 0x36, 0x49, 0x2f, 0x90, 0x7b, 0x6c, 0x9d, 0xcc, 0xae, 0xa5,
	0x34, 0xb5, 0xf6, 0xf9, 0x57, 0x8a, 0x8e, 0xc9, 0xb6, 0x0c, 0x49, 0xc6, 0x26, 0xff, 0x7f, 0xba,
	0xf1, 0x81, 0xd0, 0x73, 0x12, 0x8b, 0xb2, 0xd5, 0x92, 0xad, 0x00, 0xd3, 0x4f, 0xf8, 0xbe, 0x16,
	0xda, 0x2b, 0xdf, 0xe4, 0x1d, 0x91, 0xbe, 0x46, 0x64, 0x77, 0x3d, 0x85, 0xab, 0x8c, 0x76, 0xb0,
	0x91, 0x16, 0xfd, 0x25, 0xad, 0xf7, 0x5b, 0x1a, 0x3d, 0x25, 0xfd, 0xb0, 0xf6, 0x6e, 0x8a, 0x21,
	0xc3, 0x2e, 0xd8, 0x6d, 0x2b, 0xe6, 0xe8, 0x4d, 0x32, 0x12, 0xdf, 0x85, 0xc2, 0xe8, 0x05, 0x89,
	0xf1, 0xdf, 0xe8, 0x3e, 0xeb, 0x1a, 0xdd, 0xd8, 0xf8, 0xe8, 0xe0, 0xbb, 0x8c, 0x23, 0xa4, 0xff,
	0x6e, 0xae, 0x1e, 0x2f, 0xe7, 0xca, 0xaf, 0x44, 0xd1, 0x46, 0xf0, 0xac, 0x55, 0xf5, 0x43, 0xe3,
	0xb8, 0x5c, 0x29, 0xd0, 0x9e, 0xcf, 0x2c, 0x97, 0xc6, 0xc2, 0xd8, 0x79, 0x21, 0x97, 0xbc, 0x5a,
	0xce, 0xd9, 0x5c, 0x79, 0x8e, 0x55, 0xe3, 0x27, 0x8b, 0x38, 0xd4, 0x3c, 0x7d, 0x0f, 0x00, 0x00,
	0xff, 0xff, 0x56, 0xb6, 0x85, 0x84, 0x5c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FaucetClient is the client API for Faucet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FaucetClient interface {
	// Credit an account
	Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error)
}

type faucetClient struct {
	cc *grpc.ClientConn
}

func NewFaucetClient(cc *grpc.ClientConn) FaucetClient {
	return &faucetClient{cc}
}

func (c *faucetClient) Credit(ctx context.Context, in *CreditRequest, opts ...grpc.CallOption) (*CreditResponse, error) {
	out := new(CreditResponse)
	err := c.cc.Invoke(ctx, "/faucet.Faucet/Credit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaucetServer is the server API for Faucet service.
type FaucetServer interface {
	// Credit an account
	Credit(context.Context, *CreditRequest) (*CreditResponse, error)
}

// UnimplementedFaucetServer can be embedded to have forward compatible implementations.
type UnimplementedFaucetServer struct {
}

func (*UnimplementedFaucetServer) Credit(ctx context.Context, req *CreditRequest) (*CreditResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}

func RegisterFaucetServer(s *grpc.Server, srv FaucetServer) {
	s.RegisterService(&_Faucet_serviceDesc, srv)
}

func _Faucet_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/faucet.Faucet/Credit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetServer).Credit(ctx, req.(*CreditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Faucet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "faucet.Faucet",
	HandlerType: (*FaucetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Credit",
			Handler:    _Faucet_Credit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/faucet/faucet.proto",
}
