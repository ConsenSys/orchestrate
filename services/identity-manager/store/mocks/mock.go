// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	database "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/database"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	store "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/identity-manager/store"
	models "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/identity-manager/store/models"
	reflect "reflect"
)

// MockAgents is a mock of Agents interface
type MockAgents struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsMockRecorder
}

// MockAgentsMockRecorder is the mock recorder for MockAgents
type MockAgentsMockRecorder struct {
	mock *MockAgents
}

// NewMockAgents creates a new mock instance
func NewMockAgents(ctrl *gomock.Controller) *MockAgents {
	mock := &MockAgents{ctrl: ctrl}
	mock.recorder = &MockAgentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgents) EXPECT() *MockAgentsMockRecorder {
	return m.recorder
}

// Identity mocks base method
func (m *MockAgents) Identity() store.IdentityAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(store.IdentityAgent)
	return ret0
}

// Identity indicates an expected call of Identity
func (mr *MockAgentsMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockAgents)(nil).Identity))
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockDB) Begin() (database.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(database.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// Identity mocks base method
func (m *MockDB) Identity() store.IdentityAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Identity")
	ret0, _ := ret[0].(store.IdentityAgent)
	return ret0
}

// Identity indicates an expected call of Identity
func (mr *MockDBMockRecorder) Identity() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Identity", reflect.TypeOf((*MockDB)(nil).Identity))
}

// MockIdentityAgent is a mock of IdentityAgent interface
type MockIdentityAgent struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityAgentMockRecorder
}

// MockIdentityAgentMockRecorder is the mock recorder for MockIdentityAgent
type MockIdentityAgentMockRecorder struct {
	mock *MockIdentityAgent
}

// NewMockIdentityAgent creates a new mock instance
func NewMockIdentityAgent(ctrl *gomock.Controller) *MockIdentityAgent {
	mock := &MockIdentityAgent{ctrl: ctrl}
	mock.recorder = &MockIdentityAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityAgent) EXPECT() *MockIdentityAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockIdentityAgent) Insert(ctx context.Context, identity *models.Identity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockIdentityAgentMockRecorder) Insert(ctx, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIdentityAgent)(nil).Insert), ctx, identity)
}

// Search mocks base method
func (m *MockIdentityAgent) Search(ctx context.Context, filters *entities.IdentityFilters, tenants []string) ([]*models.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants)
	ret0, _ := ret[0].([]*models.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockIdentityAgentMockRecorder) Search(ctx, filters, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockIdentityAgent)(nil).Search), ctx, filters, tenants)
}
