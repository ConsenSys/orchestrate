// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	database "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/database"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	store "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/identity-manager/store"
	models "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/identity-manager/store/models"
	reflect "reflect"
)

// MockAgents is a mock of Agents interface
type MockAgents struct {
	ctrl     *gomock.Controller
	recorder *MockAgentsMockRecorder
}

// MockAgentsMockRecorder is the mock recorder for MockAgents
type MockAgentsMockRecorder struct {
	mock *MockAgents
}

// NewMockAgents creates a new mock instance
func NewMockAgents(ctrl *gomock.Controller) *MockAgents {
	mock := &MockAgents{ctrl: ctrl}
	mock.recorder = &MockAgentsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAgents) EXPECT() *MockAgentsMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockAgents) Account() store.AccountAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(store.AccountAgent)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockAgentsMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockAgents)(nil).Account))
}

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockDB) Begin() (database.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(database.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDB)(nil).Begin))
}

// Account mocks base method
func (m *MockDB) Account() store.AccountAgent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(store.AccountAgent)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockDBMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockDB)(nil).Account))
}

// MockAccountAgent is a mock of AccountAgent interface
type MockAccountAgent struct {
	ctrl     *gomock.Controller
	recorder *MockAccountAgentMockRecorder
}

// MockAccountAgentMockRecorder is the mock recorder for MockAccountAgent
type MockAccountAgentMockRecorder struct {
	mock *MockAccountAgent
}

// NewMockAccountAgent creates a new mock instance
func NewMockAccountAgent(ctrl *gomock.Controller) *MockAccountAgent {
	mock := &MockAccountAgent{ctrl: ctrl}
	mock.recorder = &MockAccountAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountAgent) EXPECT() *MockAccountAgentMockRecorder {
	return m.recorder
}

// Insert mocks base method
func (m *MockAccountAgent) Insert(ctx context.Context, identity *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockAccountAgentMockRecorder) Insert(ctx, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAccountAgent)(nil).Insert), ctx, identity)
}

// Update mocks base method
func (m *MockAccountAgent) Update(ctx context.Context, identity *models.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, identity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockAccountAgentMockRecorder) Update(ctx, identity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountAgent)(nil).Update), ctx, identity)
}

// FindOneByAddress mocks base method
func (m *MockAccountAgent) FindOneByAddress(ctx context.Context, address string, tenants []string) (*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByAddress", ctx, address, tenants)
	ret0, _ := ret[0].(*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByAddress indicates an expected call of FindOneByAddress
func (mr *MockAccountAgentMockRecorder) FindOneByAddress(ctx, address, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByAddress", reflect.TypeOf((*MockAccountAgent)(nil).FindOneByAddress), ctx, address, tenants)
}

// Search mocks base method
func (m *MockAccountAgent) Search(ctx context.Context, filters *entities.AccountFilters, tenants []string) ([]*models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, filters, tenants)
	ret0, _ := ret[0].([]*models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search
func (mr *MockAccountAgentMockRecorder) Search(ctx, filters, tenants interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockAccountAgent)(nil).Search), ctx, filters, tenants)
}
