// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	healthcheck "github.com/heptiolabs/healthcheck"
	entities "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/entities"
	identitymanager "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/pkg/types/identitymanager"
	reflect "reflect"
)

// MockAccountClient is a mock of AccountClient interface
type MockAccountClient struct {
	ctrl     *gomock.Controller
	recorder *MockAccountClientMockRecorder
}

// MockAccountClientMockRecorder is the mock recorder for MockAccountClient
type MockAccountClientMockRecorder struct {
	mock *MockAccountClient
}

// NewMockAccountClient creates a new mock instance
func NewMockAccountClient(ctrl *gomock.Controller) *MockAccountClient {
	mock := &MockAccountClient{ctrl: ctrl}
	mock.recorder = &MockAccountClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountClient) EXPECT() *MockAccountClientMockRecorder {
	return m.recorder
}

// CreateAccount mocks base method
func (m *MockAccountClient) CreateAccount(ctx context.Context, request *identitymanager.CreateAccountRequest) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, request)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountClientMockRecorder) CreateAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountClient)(nil).CreateAccount), ctx, request)
}

// SearchAccounts mocks base method
func (m *MockAccountClient) SearchAccounts(ctx context.Context, filters *entities.AccountFilters) ([]*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccounts", ctx, filters)
	ret0, _ := ret[0].([]*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccounts indicates an expected call of SearchAccounts
func (mr *MockAccountClientMockRecorder) SearchAccounts(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockAccountClient)(nil).SearchAccounts), ctx, filters)
}

// GetAccount mocks base method
func (m *MockAccountClient) GetAccount(ctx context.Context, address string) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, address)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountClientMockRecorder) GetAccount(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountClient)(nil).GetAccount), ctx, address)
}

// ImportAccount mocks base method
func (m *MockAccountClient) ImportAccount(ctx context.Context, request *identitymanager.ImportAccountRequest) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAccount", ctx, request)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAccount indicates an expected call of ImportAccount
func (mr *MockAccountClientMockRecorder) ImportAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAccount", reflect.TypeOf((*MockAccountClient)(nil).ImportAccount), ctx, request)
}

// UpdateAccount mocks base method
func (m *MockAccountClient) UpdateAccount(ctx context.Context, address string, request *identitymanager.UpdateAccountRequest) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, address, request)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountClientMockRecorder) UpdateAccount(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountClient)(nil).UpdateAccount), ctx, address, request)
}

// SignPayload mocks base method
func (m *MockAccountClient) SignPayload(ctx context.Context, address string, request *identitymanager.SignPayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignPayload", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignPayload indicates an expected call of SignPayload
func (mr *MockAccountClientMockRecorder) SignPayload(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPayload", reflect.TypeOf((*MockAccountClient)(nil).SignPayload), ctx, address, request)
}

// MockIdentityManagerClient is a mock of IdentityManagerClient interface
type MockIdentityManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityManagerClientMockRecorder
}

// MockIdentityManagerClientMockRecorder is the mock recorder for MockIdentityManagerClient
type MockIdentityManagerClientMockRecorder struct {
	mock *MockIdentityManagerClient
}

// NewMockIdentityManagerClient creates a new mock instance
func NewMockIdentityManagerClient(ctrl *gomock.Controller) *MockIdentityManagerClient {
	mock := &MockIdentityManagerClient{ctrl: ctrl}
	mock.recorder = &MockIdentityManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityManagerClient) EXPECT() *MockIdentityManagerClientMockRecorder {
	return m.recorder
}

// Checker mocks base method
func (m *MockIdentityManagerClient) Checker() healthcheck.Check {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(healthcheck.Check)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockIdentityManagerClientMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockIdentityManagerClient)(nil).Checker))
}

// CreateAccount mocks base method
func (m *MockIdentityManagerClient) CreateAccount(ctx context.Context, request *identitymanager.CreateAccountRequest) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", ctx, request)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockIdentityManagerClientMockRecorder) CreateAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockIdentityManagerClient)(nil).CreateAccount), ctx, request)
}

// SearchAccounts mocks base method
func (m *MockIdentityManagerClient) SearchAccounts(ctx context.Context, filters *entities.AccountFilters) ([]*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchAccounts", ctx, filters)
	ret0, _ := ret[0].([]*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchAccounts indicates an expected call of SearchAccounts
func (mr *MockIdentityManagerClientMockRecorder) SearchAccounts(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchAccounts", reflect.TypeOf((*MockIdentityManagerClient)(nil).SearchAccounts), ctx, filters)
}

// GetAccount mocks base method
func (m *MockIdentityManagerClient) GetAccount(ctx context.Context, address string) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx, address)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIdentityManagerClientMockRecorder) GetAccount(ctx, address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIdentityManagerClient)(nil).GetAccount), ctx, address)
}

// ImportAccount mocks base method
func (m *MockIdentityManagerClient) ImportAccount(ctx context.Context, request *identitymanager.ImportAccountRequest) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAccount", ctx, request)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportAccount indicates an expected call of ImportAccount
func (mr *MockIdentityManagerClientMockRecorder) ImportAccount(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAccount", reflect.TypeOf((*MockIdentityManagerClient)(nil).ImportAccount), ctx, request)
}

// UpdateAccount mocks base method
func (m *MockIdentityManagerClient) UpdateAccount(ctx context.Context, address string, request *identitymanager.UpdateAccountRequest) (*identitymanager.AccountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", ctx, address, request)
	ret0, _ := ret[0].(*identitymanager.AccountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockIdentityManagerClientMockRecorder) UpdateAccount(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockIdentityManagerClient)(nil).UpdateAccount), ctx, address, request)
}

// SignPayload mocks base method
func (m *MockIdentityManagerClient) SignPayload(ctx context.Context, address string, request *identitymanager.SignPayloadRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignPayload", ctx, address, request)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignPayload indicates an expected call of SignPayload
func (mr *MockIdentityManagerClientMockRecorder) SignPayload(ctx, address, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignPayload", reflect.TypeOf((*MockIdentityManagerClient)(nil).SignPayload), ctx, address, request)
}
