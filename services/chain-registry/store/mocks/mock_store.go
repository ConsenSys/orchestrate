// Code generated by MockGen. DO NOT EDIT.
// Source: services/chain-registry/store/types/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/chain-registry/store/types"
	reflect "reflect"
)

// MockChainRegistryStore is a mock of ChainRegistryStore interface
type MockChainRegistryStore struct {
	ctrl     *gomock.Controller
	recorder *MockChainRegistryStoreMockRecorder
}

// MockChainRegistryStoreMockRecorder is the mock recorder for MockChainRegistryStore
type MockChainRegistryStoreMockRecorder struct {
	mock *MockChainRegistryStore
}

// NewMockChainRegistryStore creates a new mock instance
func NewMockChainRegistryStore(ctrl *gomock.Controller) *MockChainRegistryStore {
	mock := &MockChainRegistryStore{ctrl: ctrl}
	mock.recorder = &MockChainRegistryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainRegistryStore) EXPECT() *MockChainRegistryStoreMockRecorder {
	return m.recorder
}

// RegisterNode mocks base method
func (m *MockChainRegistryStore) RegisterNode(ctx context.Context, node *types.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNode", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterNode indicates an expected call of RegisterNode
func (mr *MockChainRegistryStoreMockRecorder) RegisterNode(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNode", reflect.TypeOf((*MockChainRegistryStore)(nil).RegisterNode), ctx, node)
}

// GetNodes mocks base method
func (m *MockChainRegistryStore) GetNodes(ctx context.Context, filters map[string]string) ([]*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx, filters)
	ret0, _ := ret[0].([]*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockChainRegistryStoreMockRecorder) GetNodes(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockChainRegistryStore)(nil).GetNodes), ctx, filters)
}

// GetNodesByTenantID mocks base method
func (m *MockChainRegistryStore) GetNodesByTenantID(ctx context.Context, tenantID string, filters map[string]string) ([]*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodesByTenantID", ctx, tenantID, filters)
	ret0, _ := ret[0].([]*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodesByTenantID indicates an expected call of GetNodesByTenantID
func (mr *MockChainRegistryStoreMockRecorder) GetNodesByTenantID(ctx, tenantID, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodesByTenantID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetNodesByTenantID), ctx, tenantID, filters)
}

// GetNodeByTenantIDAndNodeName mocks base method
func (m *MockChainRegistryStore) GetNodeByTenantIDAndNodeName(ctx context.Context, tenantID, name string) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTenantIDAndNodeName", ctx, tenantID, name)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTenantIDAndNodeName indicates an expected call of GetNodeByTenantIDAndNodeName
func (mr *MockChainRegistryStoreMockRecorder) GetNodeByTenantIDAndNodeName(ctx, tenantID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTenantIDAndNodeName", reflect.TypeOf((*MockChainRegistryStore)(nil).GetNodeByTenantIDAndNodeName), ctx, tenantID, name)
}

// GetNodeByTenantIDAndNodeID mocks base method
func (m *MockChainRegistryStore) GetNodeByTenantIDAndNodeID(ctx context.Context, tenantID, id string) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTenantIDAndNodeID", ctx, tenantID, id)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTenantIDAndNodeID indicates an expected call of GetNodeByTenantIDAndNodeID
func (mr *MockChainRegistryStoreMockRecorder) GetNodeByTenantIDAndNodeID(ctx, tenantID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTenantIDAndNodeID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetNodeByTenantIDAndNodeID), ctx, tenantID, id)
}

// GetNodeByID mocks base method
func (m *MockChainRegistryStore) GetNodeByID(ctx context.Context, ID string) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByID", ctx, ID)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByID indicates an expected call of GetNodeByID
func (mr *MockChainRegistryStoreMockRecorder) GetNodeByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetNodeByID), ctx, ID)
}

// UpdateNodeByName mocks base method
func (m *MockChainRegistryStore) UpdateNodeByName(ctx context.Context, node *types.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeByName", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodeByName indicates an expected call of UpdateNodeByName
func (mr *MockChainRegistryStoreMockRecorder) UpdateNodeByName(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeByName", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateNodeByName), ctx, node)
}

// UpdateBlockPositionByName mocks base method
func (m *MockChainRegistryStore) UpdateBlockPositionByName(ctx context.Context, name, tenantID string, blockPosition int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPositionByName", ctx, name, tenantID, blockPosition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPositionByName indicates an expected call of UpdateBlockPositionByName
func (mr *MockChainRegistryStoreMockRecorder) UpdateBlockPositionByName(ctx, name, tenantID, blockPosition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPositionByName", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateBlockPositionByName), ctx, name, tenantID, blockPosition)
}

// UpdateNodeByID mocks base method
func (m *MockChainRegistryStore) UpdateNodeByID(ctx context.Context, node *types.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNodeByID", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNodeByID indicates an expected call of UpdateNodeByID
func (mr *MockChainRegistryStoreMockRecorder) UpdateNodeByID(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNodeByID", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateNodeByID), ctx, node)
}

// UpdateBlockPositionByID mocks base method
func (m *MockChainRegistryStore) UpdateBlockPositionByID(ctx context.Context, id string, blockPosition int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPositionByID", ctx, id, blockPosition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPositionByID indicates an expected call of UpdateBlockPositionByID
func (mr *MockChainRegistryStoreMockRecorder) UpdateBlockPositionByID(ctx, id, blockPosition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPositionByID", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateBlockPositionByID), ctx, id, blockPosition)
}

// DeleteNodeByName mocks base method
func (m *MockChainRegistryStore) DeleteNodeByName(ctx context.Context, node *types.Node) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeByName", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeByName indicates an expected call of DeleteNodeByName
func (mr *MockChainRegistryStoreMockRecorder) DeleteNodeByName(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeByName", reflect.TypeOf((*MockChainRegistryStore)(nil).DeleteNodeByName), ctx, node)
}

// DeleteNodeByID mocks base method
func (m *MockChainRegistryStore) DeleteNodeByID(ctx context.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeByID", ctx, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeByID indicates an expected call of DeleteNodeByID
func (mr *MockChainRegistryStoreMockRecorder) DeleteNodeByID(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeByID", reflect.TypeOf((*MockChainRegistryStore)(nil).DeleteNodeByID), ctx, ID)
}
