// Code generated by MockGen. DO NOT EDIT.
// Source: services/chain-registry/store/types/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/chain-registry/store/types"
	reflect "reflect"
)

// MockChainRegistryStore is a mock of ChainRegistryStore interface
type MockChainRegistryStore struct {
	ctrl     *gomock.Controller
	recorder *MockChainRegistryStoreMockRecorder
}

// MockChainRegistryStoreMockRecorder is the mock recorder for MockChainRegistryStore
type MockChainRegistryStoreMockRecorder struct {
	mock *MockChainRegistryStore
}

// NewMockChainRegistryStore creates a new mock instance
func NewMockChainRegistryStore(ctrl *gomock.Controller) *MockChainRegistryStore {
	mock := &MockChainRegistryStore{ctrl: ctrl}
	mock.recorder = &MockChainRegistryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainRegistryStore) EXPECT() *MockChainRegistryStoreMockRecorder {
	return m.recorder
}

// RegisterChain mocks base method
func (m *MockChainRegistryStore) RegisterChain(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterChain", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterChain indicates an expected call of RegisterChain
func (mr *MockChainRegistryStoreMockRecorder) RegisterChain(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChain", reflect.TypeOf((*MockChainRegistryStore)(nil).RegisterChain), ctx, chain)
}

// GetChains mocks base method
func (m *MockChainRegistryStore) GetChains(ctx context.Context, filters map[string]string) ([]*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", ctx, filters)
	ret0, _ := ret[0].([]*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains
func (mr *MockChainRegistryStoreMockRecorder) GetChains(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChains), ctx, filters)
}

// GetChainsByTenant mocks base method
func (m *MockChainRegistryStore) GetChainsByTenant(ctx context.Context, filters map[string]string, tenantID string) ([]*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainsByTenant", ctx, filters, tenantID)
	ret0, _ := ret[0].([]*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainsByTenant indicates an expected call of GetChainsByTenant
func (mr *MockChainRegistryStoreMockRecorder) GetChainsByTenant(ctx, filters, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainsByTenant", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainsByTenant), ctx, filters, tenantID)
}

// GetChainByUUID mocks base method
func (m *MockChainRegistryStore) GetChainByUUID(ctx context.Context, uuid string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUID", ctx, uuid)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUID indicates an expected call of GetChainByUUID
func (mr *MockChainRegistryStoreMockRecorder) GetChainByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainByUUID), ctx, uuid)
}

// GetChainByUUIDAndTenant mocks base method
func (m *MockChainRegistryStore) GetChainByUUIDAndTenant(ctx context.Context, uuid, tenantID string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUIDAndTenant", ctx, uuid, tenantID)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUIDAndTenant indicates an expected call of GetChainByUUIDAndTenant
func (mr *MockChainRegistryStoreMockRecorder) GetChainByUUIDAndTenant(ctx, uuid, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUIDAndTenant", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainByUUIDAndTenant), ctx, uuid, tenantID)
}

// UpdateChainByName mocks base method
func (m *MockChainRegistryStore) UpdateChainByName(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChainByName", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChainByName indicates an expected call of UpdateChainByName
func (mr *MockChainRegistryStoreMockRecorder) UpdateChainByName(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainByName", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateChainByName), ctx, chain)
}

// UpdateChainByUUID mocks base method
func (m *MockChainRegistryStore) UpdateChainByUUID(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChainByUUID", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChainByUUID indicates an expected call of UpdateChainByUUID
func (mr *MockChainRegistryStoreMockRecorder) UpdateChainByUUID(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateChainByUUID), ctx, chain)
}

// DeleteChainByUUID mocks base method
func (m *MockChainRegistryStore) DeleteChainByUUID(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChainByUUID", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChainByUUID indicates an expected call of DeleteChainByUUID
func (mr *MockChainRegistryStoreMockRecorder) DeleteChainByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChainByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).DeleteChainByUUID), ctx, uuid)
}

// DeleteChainByUUIDAndTenant mocks base method
func (m *MockChainRegistryStore) DeleteChainByUUIDAndTenant(ctx context.Context, uuid, tenantID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChainByUUIDAndTenant", ctx, uuid, tenantID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChainByUUIDAndTenant indicates an expected call of DeleteChainByUUIDAndTenant
func (mr *MockChainRegistryStoreMockRecorder) DeleteChainByUUIDAndTenant(ctx, uuid, tenantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChainByUUIDAndTenant", reflect.TypeOf((*MockChainRegistryStore)(nil).DeleteChainByUUIDAndTenant), ctx, uuid, tenantID)
}
