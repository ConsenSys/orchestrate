// Code generated by MockGen. DO NOT EDIT.
// Source: services/chain-registry/store/types/store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/chain-registry/store/types"
	reflect "reflect"
)

// MockChainRegistryStore is a mock of ChainRegistryStore interface
type MockChainRegistryStore struct {
	ctrl     *gomock.Controller
	recorder *MockChainRegistryStoreMockRecorder
}

// MockChainRegistryStoreMockRecorder is the mock recorder for MockChainRegistryStore
type MockChainRegistryStoreMockRecorder struct {
	mock *MockChainRegistryStore
}

// NewMockChainRegistryStore creates a new mock instance
func NewMockChainRegistryStore(ctrl *gomock.Controller) *MockChainRegistryStore {
	mock := &MockChainRegistryStore{ctrl: ctrl}
	mock.recorder = &MockChainRegistryStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainRegistryStore) EXPECT() *MockChainRegistryStoreMockRecorder {
	return m.recorder
}

// RegisterChain mocks base method
func (m *MockChainRegistryStore) RegisterChain(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterChain", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterChain indicates an expected call of RegisterChain
func (mr *MockChainRegistryStoreMockRecorder) RegisterChain(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChain", reflect.TypeOf((*MockChainRegistryStore)(nil).RegisterChain), ctx, chain)
}

// GetChains mocks base method
func (m *MockChainRegistryStore) GetChains(ctx context.Context, filters map[string]string) ([]*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", ctx, filters)
	ret0, _ := ret[0].([]*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains
func (mr *MockChainRegistryStoreMockRecorder) GetChains(ctx, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChains), ctx, filters)
}

// GetChainsByTenantID mocks base method
func (m *MockChainRegistryStore) GetChainsByTenantID(ctx context.Context, tenantID string, filters map[string]string) ([]*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainsByTenantID", ctx, tenantID, filters)
	ret0, _ := ret[0].([]*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainsByTenantID indicates an expected call of GetChainsByTenantID
func (mr *MockChainRegistryStoreMockRecorder) GetChainsByTenantID(ctx, tenantID, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainsByTenantID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainsByTenantID), ctx, tenantID, filters)
}

// GetChainByTenantIDAndName mocks base method
func (m *MockChainRegistryStore) GetChainByTenantIDAndName(ctx context.Context, tenantID, name string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByTenantIDAndName", ctx, tenantID, name)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByTenantIDAndName indicates an expected call of GetChainByTenantIDAndName
func (mr *MockChainRegistryStoreMockRecorder) GetChainByTenantIDAndName(ctx, tenantID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByTenantIDAndName", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainByTenantIDAndName), ctx, tenantID, name)
}

// GetChainByTenantIDAndUUID mocks base method
func (m *MockChainRegistryStore) GetChainByTenantIDAndUUID(ctx context.Context, tenantID, uuid string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByTenantIDAndUUID", ctx, tenantID, uuid)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByTenantIDAndUUID indicates an expected call of GetChainByTenantIDAndUUID
func (mr *MockChainRegistryStoreMockRecorder) GetChainByTenantIDAndUUID(ctx, tenantID, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByTenantIDAndUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainByTenantIDAndUUID), ctx, tenantID, uuid)
}

// GetChainByUUID mocks base method
func (m *MockChainRegistryStore) GetChainByUUID(ctx context.Context, uuid string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUID", ctx, uuid)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUID indicates an expected call of GetChainByUUID
func (mr *MockChainRegistryStoreMockRecorder) GetChainByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).GetChainByUUID), ctx, uuid)
}

// UpdateChainByName mocks base method
func (m *MockChainRegistryStore) UpdateChainByName(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChainByName", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChainByName indicates an expected call of UpdateChainByName
func (mr *MockChainRegistryStoreMockRecorder) UpdateChainByName(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainByName", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateChainByName), ctx, chain)
}

// UpdateBlockPositionByName mocks base method
func (m *MockChainRegistryStore) UpdateBlockPositionByName(ctx context.Context, name, tenantID string, blockPosition int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPositionByName", ctx, name, tenantID, blockPosition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPositionByName indicates an expected call of UpdateBlockPositionByName
func (mr *MockChainRegistryStoreMockRecorder) UpdateBlockPositionByName(ctx, name, tenantID, blockPosition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPositionByName", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateBlockPositionByName), ctx, name, tenantID, blockPosition)
}

// UpdateChainByUUID mocks base method
func (m *MockChainRegistryStore) UpdateChainByUUID(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChainByUUID", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChainByUUID indicates an expected call of UpdateChainByUUID
func (mr *MockChainRegistryStoreMockRecorder) UpdateChainByUUID(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateChainByUUID), ctx, chain)
}

// UpdateBlockPositionByUUID mocks base method
func (m *MockChainRegistryStore) UpdateBlockPositionByUUID(ctx context.Context, uuid string, blockPosition int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPositionByUUID", ctx, uuid, blockPosition)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPositionByUUID indicates an expected call of UpdateBlockPositionByUUID
func (mr *MockChainRegistryStoreMockRecorder) UpdateBlockPositionByUUID(ctx, uuid, blockPosition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPositionByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).UpdateBlockPositionByUUID), ctx, uuid, blockPosition)
}

// DeleteChainByName mocks base method
func (m *MockChainRegistryStore) DeleteChainByName(ctx context.Context, chain *types.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChainByName", ctx, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChainByName indicates an expected call of DeleteChainByName
func (mr *MockChainRegistryStoreMockRecorder) DeleteChainByName(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChainByName", reflect.TypeOf((*MockChainRegistryStore)(nil).DeleteChainByName), ctx, chain)
}

// DeleteChainByUUID mocks base method
func (m *MockChainRegistryStore) DeleteChainByUUID(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChainByUUID", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChainByUUID indicates an expected call of DeleteChainByUUID
func (mr *MockChainRegistryStoreMockRecorder) DeleteChainByUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChainByUUID", reflect.TypeOf((*MockChainRegistryStore)(nil).DeleteChainByUUID), ctx, uuid)
}
