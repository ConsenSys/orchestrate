// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	healthcheck "github.com/heptiolabs/healthcheck"
	models "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/v2/services/chain-registry/store/models"
	reflect "reflect"
)

// MockChainClient is a mock of ChainClient interface
type MockChainClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainClientMockRecorder
}

// MockChainClientMockRecorder is the mock recorder for MockChainClient
type MockChainClientMockRecorder struct {
	mock *MockChainClient
}

// NewMockChainClient creates a new mock instance
func NewMockChainClient(ctrl *gomock.Controller) *MockChainClient {
	mock := &MockChainClient{ctrl: ctrl}
	mock.recorder = &MockChainClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainClient) EXPECT() *MockChainClientMockRecorder {
	return m.recorder
}

// GetChains mocks base method
func (m *MockChainClient) GetChains(ctx context.Context) ([]*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", ctx)
	ret0, _ := ret[0].([]*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains
func (mr *MockChainClientMockRecorder) GetChains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockChainClient)(nil).GetChains), ctx)
}

// GetChainByName mocks base method
func (m *MockChainClient) GetChainByName(ctx context.Context, chainName string) (*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByName", ctx, chainName)
	ret0, _ := ret[0].(*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByName indicates an expected call of GetChainByName
func (mr *MockChainClientMockRecorder) GetChainByName(ctx, chainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByName", reflect.TypeOf((*MockChainClient)(nil).GetChainByName), ctx, chainName)
}

// GetChainByUUID mocks base method
func (m *MockChainClient) GetChainByUUID(ctx context.Context, chainUUID string) (*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUID", ctx, chainUUID)
	ret0, _ := ret[0].(*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUID indicates an expected call of GetChainByUUID
func (mr *MockChainClientMockRecorder) GetChainByUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUID", reflect.TypeOf((*MockChainClient)(nil).GetChainByUUID), ctx, chainUUID)
}

// DeleteChainByUUID mocks base method
func (m *MockChainClient) DeleteChainByUUID(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChainByUUID", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChainByUUID indicates an expected call of DeleteChainByUUID
func (mr *MockChainClientMockRecorder) DeleteChainByUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChainByUUID", reflect.TypeOf((*MockChainClient)(nil).DeleteChainByUUID), ctx, chainUUID)
}

// RegisterChain mocks base method
func (m *MockChainClient) RegisterChain(ctx context.Context, chain *models.Chain) (*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterChain", ctx, chain)
	ret0, _ := ret[0].(*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterChain indicates an expected call of RegisterChain
func (mr *MockChainClientMockRecorder) RegisterChain(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChain", reflect.TypeOf((*MockChainClient)(nil).RegisterChain), ctx, chain)
}

// UpdateBlockPosition mocks base method
func (m *MockChainClient) UpdateBlockPosition(ctx context.Context, chainUUID string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPosition", ctx, chainUUID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPosition indicates an expected call of UpdateBlockPosition
func (mr *MockChainClientMockRecorder) UpdateBlockPosition(ctx, chainUUID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPosition", reflect.TypeOf((*MockChainClient)(nil).UpdateBlockPosition), ctx, chainUUID, blockNumber)
}

// UpdateChainByUUID mocks base method
func (m *MockChainClient) UpdateChainByUUID(ctx context.Context, chainUUID string, chain *models.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChainByUUID", ctx, chainUUID, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChainByUUID indicates an expected call of UpdateChainByUUID
func (mr *MockChainClientMockRecorder) UpdateChainByUUID(ctx, chainUUID, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainByUUID", reflect.TypeOf((*MockChainClient)(nil).UpdateChainByUUID), ctx, chainUUID, chain)
}

// MockChainRegistryClient is a mock of ChainRegistryClient interface
type MockChainRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainRegistryClientMockRecorder
}

// MockChainRegistryClientMockRecorder is the mock recorder for MockChainRegistryClient
type MockChainRegistryClientMockRecorder struct {
	mock *MockChainRegistryClient
}

// NewMockChainRegistryClient creates a new mock instance
func NewMockChainRegistryClient(ctrl *gomock.Controller) *MockChainRegistryClient {
	mock := &MockChainRegistryClient{ctrl: ctrl}
	mock.recorder = &MockChainRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainRegistryClient) EXPECT() *MockChainRegistryClientMockRecorder {
	return m.recorder
}

// Checker mocks base method
func (m *MockChainRegistryClient) Checker() healthcheck.Check {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker")
	ret0, _ := ret[0].(healthcheck.Check)
	return ret0
}

// Checker indicates an expected call of Checker
func (mr *MockChainRegistryClientMockRecorder) Checker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockChainRegistryClient)(nil).Checker))
}

// GetChains mocks base method
func (m *MockChainRegistryClient) GetChains(ctx context.Context) ([]*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", ctx)
	ret0, _ := ret[0].([]*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains
func (mr *MockChainRegistryClientMockRecorder) GetChains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockChainRegistryClient)(nil).GetChains), ctx)
}

// GetChainByName mocks base method
func (m *MockChainRegistryClient) GetChainByName(ctx context.Context, chainName string) (*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByName", ctx, chainName)
	ret0, _ := ret[0].(*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByName indicates an expected call of GetChainByName
func (mr *MockChainRegistryClientMockRecorder) GetChainByName(ctx, chainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByName", reflect.TypeOf((*MockChainRegistryClient)(nil).GetChainByName), ctx, chainName)
}

// GetChainByUUID mocks base method
func (m *MockChainRegistryClient) GetChainByUUID(ctx context.Context, chainUUID string) (*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUID", ctx, chainUUID)
	ret0, _ := ret[0].(*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUID indicates an expected call of GetChainByUUID
func (mr *MockChainRegistryClientMockRecorder) GetChainByUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUID", reflect.TypeOf((*MockChainRegistryClient)(nil).GetChainByUUID), ctx, chainUUID)
}

// DeleteChainByUUID mocks base method
func (m *MockChainRegistryClient) DeleteChainByUUID(ctx context.Context, chainUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteChainByUUID", ctx, chainUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteChainByUUID indicates an expected call of DeleteChainByUUID
func (mr *MockChainRegistryClientMockRecorder) DeleteChainByUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteChainByUUID", reflect.TypeOf((*MockChainRegistryClient)(nil).DeleteChainByUUID), ctx, chainUUID)
}

// RegisterChain mocks base method
func (m *MockChainRegistryClient) RegisterChain(ctx context.Context, chain *models.Chain) (*models.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterChain", ctx, chain)
	ret0, _ := ret[0].(*models.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterChain indicates an expected call of RegisterChain
func (mr *MockChainRegistryClientMockRecorder) RegisterChain(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterChain", reflect.TypeOf((*MockChainRegistryClient)(nil).RegisterChain), ctx, chain)
}

// UpdateBlockPosition mocks base method
func (m *MockChainRegistryClient) UpdateBlockPosition(ctx context.Context, chainUUID string, blockNumber uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPosition", ctx, chainUUID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPosition indicates an expected call of UpdateBlockPosition
func (mr *MockChainRegistryClientMockRecorder) UpdateBlockPosition(ctx, chainUUID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPosition", reflect.TypeOf((*MockChainRegistryClient)(nil).UpdateBlockPosition), ctx, chainUUID, blockNumber)
}

// UpdateChainByUUID mocks base method
func (m *MockChainRegistryClient) UpdateChainByUUID(ctx context.Context, chainUUID string, chain *models.Chain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateChainByUUID", ctx, chainUUID, chain)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateChainByUUID indicates an expected call of UpdateChainByUUID
func (mr *MockChainRegistryClientMockRecorder) UpdateChainByUUID(ctx, chainUUID, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateChainByUUID", reflect.TypeOf((*MockChainRegistryClient)(nil).UpdateChainByUUID), ctx, chainUUID, chain)
}
