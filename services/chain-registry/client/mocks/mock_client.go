// Code generated by MockGen. DO NOT EDIT.
// Source: services/chain-registry/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/chain-registry/store/types"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetChains mocks base method
func (m *MockClient) GetChains(ctx context.Context) ([]*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", ctx)
	ret0, _ := ret[0].([]*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains
func (mr *MockClientMockRecorder) GetChains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockClient)(nil).GetChains), ctx)
}

// GetChainByUUID mocks base method
func (m *MockClient) GetChainByUUID(ctx context.Context, chainUUID string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUID", ctx, chainUUID)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUID indicates an expected call of GetChainByUUID
func (mr *MockClientMockRecorder) GetChainByUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUID", reflect.TypeOf((*MockClient)(nil).GetChainByUUID), ctx, chainUUID)
}

// GetChainByTenantAndName mocks base method
func (m *MockClient) GetChainByTenantAndName(ctx context.Context, tenantID, chainName string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByTenantAndName", ctx, tenantID, chainName)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByTenantAndName indicates an expected call of GetChainByTenantAndName
func (mr *MockClientMockRecorder) GetChainByTenantAndName(ctx, tenantID, chainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByTenantAndName", reflect.TypeOf((*MockClient)(nil).GetChainByTenantAndName), ctx, tenantID, chainName)
}

// GetChainByTenantAndUUID mocks base method
func (m *MockClient) GetChainByTenantAndUUID(ctx context.Context, tenantID, chainUUID string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByTenantAndUUID", ctx, tenantID, chainUUID)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByTenantAndUUID indicates an expected call of GetChainByTenantAndUUID
func (mr *MockClientMockRecorder) GetChainByTenantAndUUID(ctx, tenantID, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByTenantAndUUID", reflect.TypeOf((*MockClient)(nil).GetChainByTenantAndUUID), ctx, tenantID, chainUUID)
}

// UpdateBlockPosition mocks base method
func (m *MockClient) UpdateBlockPosition(ctx context.Context, chainUUID string, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPosition", ctx, chainUUID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPosition indicates an expected call of UpdateBlockPosition
func (mr *MockClientMockRecorder) UpdateBlockPosition(ctx, chainUUID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPosition", reflect.TypeOf((*MockClient)(nil).UpdateBlockPosition), ctx, chainUUID, blockNumber)
}
