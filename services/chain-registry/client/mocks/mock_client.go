// Code generated by MockGen. DO NOT EDIT.
// Source: services/chain-registry/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/chain-registry/store/types"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetNodes mocks base method
func (m *MockClient) GetNodes(ctx context.Context) ([]*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodes", ctx)
	ret0, _ := ret[0].([]*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodes indicates an expected call of GetNodes
func (mr *MockClientMockRecorder) GetNodes(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodes", reflect.TypeOf((*MockClient)(nil).GetNodes), ctx)
}

// GetNodeByID mocks base method
func (m *MockClient) GetNodeByID(ctx context.Context, nodeID string) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByID", ctx, nodeID)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByID indicates an expected call of GetNodeByID
func (mr *MockClientMockRecorder) GetNodeByID(ctx, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByID", reflect.TypeOf((*MockClient)(nil).GetNodeByID), ctx, nodeID)
}

// GetNodeByTenantAndNodeName mocks base method
func (m *MockClient) GetNodeByTenantAndNodeName(ctx context.Context, tenantID, nodeName string) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTenantAndNodeName", ctx, tenantID, nodeName)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTenantAndNodeName indicates an expected call of GetNodeByTenantAndNodeName
func (mr *MockClientMockRecorder) GetNodeByTenantAndNodeName(ctx, tenantID, nodeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTenantAndNodeName", reflect.TypeOf((*MockClient)(nil).GetNodeByTenantAndNodeName), ctx, tenantID, nodeName)
}

// GetNodeByTenantAndNodeID mocks base method
func (m *MockClient) GetNodeByTenantAndNodeID(ctx context.Context, tenantID, nodeID string) (*types.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeByTenantAndNodeID", ctx, tenantID, nodeID)
	ret0, _ := ret[0].(*types.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeByTenantAndNodeID indicates an expected call of GetNodeByTenantAndNodeID
func (mr *MockClientMockRecorder) GetNodeByTenantAndNodeID(ctx, tenantID, nodeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeByTenantAndNodeID", reflect.TypeOf((*MockClient)(nil).GetNodeByTenantAndNodeID), ctx, tenantID, nodeID)
}

// UpdateBlockPosition mocks base method
func (m *MockClient) UpdateBlockPosition(ctx context.Context, nodeID string, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPosition", ctx, nodeID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPosition indicates an expected call of UpdateBlockPosition
func (mr *MockClientMockRecorder) UpdateBlockPosition(ctx, nodeID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPosition", reflect.TypeOf((*MockClient)(nil).UpdateBlockPosition), ctx, nodeID, blockNumber)
}
