// Code generated by MockGen. DO NOT EDIT.
// Source: services/chain-registry/client/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	types "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/services/chain-registry/store/types"
	reflect "reflect"
)

// MockChainRegistryClient is a mock of ChainRegistryClient interface
type MockChainRegistryClient struct {
	ctrl     *gomock.Controller
	recorder *MockChainRegistryClientMockRecorder
}

// MockChainRegistryClientMockRecorder is the mock recorder for MockChainRegistryClient
type MockChainRegistryClientMockRecorder struct {
	mock *MockChainRegistryClient
}

// NewMockChainRegistryClient creates a new mock instance
func NewMockChainRegistryClient(ctrl *gomock.Controller) *MockChainRegistryClient {
	mock := &MockChainRegistryClient{ctrl: ctrl}
	mock.recorder = &MockChainRegistryClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChainRegistryClient) EXPECT() *MockChainRegistryClientMockRecorder {
	return m.recorder
}

// GetChains mocks base method
func (m *MockChainRegistryClient) GetChains(ctx context.Context) ([]*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChains", ctx)
	ret0, _ := ret[0].([]*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChains indicates an expected call of GetChains
func (mr *MockChainRegistryClientMockRecorder) GetChains(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChains", reflect.TypeOf((*MockChainRegistryClient)(nil).GetChains), ctx)
}

// GetChainByName mocks base method
func (m *MockChainRegistryClient) GetChainByName(ctx context.Context, chainName string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByName", ctx, chainName)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByName indicates an expected call of GetChainByName
func (mr *MockChainRegistryClientMockRecorder) GetChainByName(ctx, chainName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByName", reflect.TypeOf((*MockChainRegistryClient)(nil).GetChainByName), ctx, chainName)
}

// GetChainByUUID mocks base method
func (m *MockChainRegistryClient) GetChainByUUID(ctx context.Context, chainUUID string) (*types.Chain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainByUUID", ctx, chainUUID)
	ret0, _ := ret[0].(*types.Chain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainByUUID indicates an expected call of GetChainByUUID
func (mr *MockChainRegistryClientMockRecorder) GetChainByUUID(ctx, chainUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainByUUID", reflect.TypeOf((*MockChainRegistryClient)(nil).GetChainByUUID), ctx, chainUUID)
}

// UpdateBlockPosition mocks base method
func (m *MockChainRegistryClient) UpdateBlockPosition(ctx context.Context, chainUUID string, blockNumber int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBlockPosition", ctx, chainUUID, blockNumber)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBlockPosition indicates an expected call of UpdateBlockPosition
func (mr *MockChainRegistryClientMockRecorder) UpdateBlockPosition(ctx, chainUUID, blockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBlockPosition", reflect.TypeOf((*MockChainRegistryClient)(nil).UpdateBlockPosition), ctx, chainUUID, blockNumber)
}
