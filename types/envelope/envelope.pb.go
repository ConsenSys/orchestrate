// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/envelope/envelope.proto

package envelope

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	tx "gitlab.com/ConsenSys/client/fr/core-stack/orchestrate.git/types/tx"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Envelope struct {
	// Types that are valid to be assigned to Body:
	//	*Envelope_TxRequest
	//	*Envelope_TxResponse
	Body                 isEnvelope_Body `protobuf_oneof:"body"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}
func (*Envelope) Descriptor() ([]byte, []int) {
	return fileDescriptor_3335256a9be09a8d, []int{0}
}

func (m *Envelope) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Envelope.Unmarshal(m, b)
}
func (m *Envelope) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Envelope.Marshal(b, m, deterministic)
}
func (m *Envelope) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Envelope.Merge(m, src)
}
func (m *Envelope) XXX_Size() int {
	return xxx_messageInfo_Envelope.Size(m)
}
func (m *Envelope) XXX_DiscardUnknown() {
	xxx_messageInfo_Envelope.DiscardUnknown(m)
}

var xxx_messageInfo_Envelope proto.InternalMessageInfo

type isEnvelope_Body interface {
	isEnvelope_Body()
}

type Envelope_TxRequest struct {
	TxRequest *tx.TxRequest `protobuf:"bytes,1,opt,name=tx_request,json=txRequest,proto3,oneof"`
}

type Envelope_TxResponse struct {
	TxResponse *tx.TxResponse `protobuf:"bytes,2,opt,name=tx_response,json=txResponse,proto3,oneof"`
}

func (*Envelope_TxRequest) isEnvelope_Body() {}

func (*Envelope_TxResponse) isEnvelope_Body() {}

func (m *Envelope) GetBody() isEnvelope_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Envelope) GetTxRequest() *tx.TxRequest {
	if x, ok := m.GetBody().(*Envelope_TxRequest); ok {
		return x.TxRequest
	}
	return nil
}

func (m *Envelope) GetTxResponse() *tx.TxResponse {
	if x, ok := m.GetBody().(*Envelope_TxResponse); ok {
		return x.TxResponse
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Envelope) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Envelope_TxRequest)(nil),
		(*Envelope_TxResponse)(nil),
	}
}

func init() {
	proto.RegisterType((*Envelope)(nil), "envelope.Envelope")
}

func init() { proto.RegisterFile("types/envelope/envelope.proto", fileDescriptor_3335256a9be09a8d) }

var fileDescriptor_3335256a9be09a8d = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x41, 0x4b, 0xc4, 0x30,
	0x10, 0x85, 0x5b, 0x91, 0x52, 0x53, 0x14, 0xec, 0xa9, 0x08, 0x82, 0x78, 0xf2, 0x62, 0x06, 0xf5,
	0x1f, 0x54, 0x84, 0xe2, 0xb1, 0x7a, 0xf2, 0x22, 0x6d, 0x1c, 0x6b, 0xb1, 0x9b, 0xc9, 0x26, 0xd3,
	0x25, 0xfd, 0xf7, 0xcb, 0x36, 0xdb, 0xc2, 0xde, 0xe6, 0x9b, 0xef, 0xbd, 0xc3, 0x13, 0xb7, 0x3c,
	0x19, 0x74, 0x80, 0x7a, 0x87, 0x03, 0x19, 0x5c, 0x0f, 0x69, 0x2c, 0x31, 0xe5, 0xe9, 0xc2, 0x37,
	0xd7, 0x21, 0xc8, 0x1e, 0xd8, 0x07, 0x79, 0x3f, 0x8a, 0xf4, 0xed, 0xa8, 0x73, 0x29, 0x04, 0xfb,
	0x6f, 0x8b, 0xdb, 0x11, 0x1d, 0x17, 0xf1, 0x5d, 0xfc, 0x90, 0x3d, 0x5f, 0x4a, 0xf6, 0xf2, 0xd3,
	0xd7, 0xe1, 0x59, 0x45, 0xf5, 0x05, 0x2f, 0x90, 0x3f, 0x89, 0x6c, 0xce, 0x3b, 0x43, 0xda, 0x61,
	0x71, 0x36, 0x17, 0xae, 0x96, 0x42, 0xf8, 0x56, 0x51, 0x2d, 0x78, 0xa5, 0x32, 0x11, 0xe7, 0x2d,
	0xfd, 0x4c, 0xe5, 0xfb, 0x57, 0xd5, 0xf5, 0x3c, 0x34, 0xad, 0x54, 0xb4, 0x81, 0xd7, 0x83, 0xd3,
	0x1f, 0x93, 0x03, 0x35, 0xf4, 0xa8, 0x19, 0x7e, 0x2d, 0x28, 0xb2, 0xf8, 0xe8, 0xb8, 0x51, 0xff,
	0x40, 0x56, 0xfd, 0xa1, 0x63, 0xdb, 0x30, 0xca, 0xae, 0x67, 0x38, 0x9d, 0xdb, 0x26, 0xf3, 0x92,
	0x97, 0x7d, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xcc, 0xb9, 0xe5, 0x07, 0x01, 0x00, 0x00,
}
