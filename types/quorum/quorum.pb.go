// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types/quorum/quorum.proto

package quorum

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Proto message to support quorum privateFor transactions
type Quorum struct {
	// Quorum version to be used
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// When sending a private transaction, the sending party's base64-encoded public key to use.
	// If not present and passing private_for, use the default key as configured in Quorum TransactionManager.
	PrivateFrom string `protobuf:"bytes,2,opt,name=private_from,json=privateFrom,proto3" json:"private_from,omitempty"`
	// When sending a private transaction, an array of the recipients' base64-encoded public keys.
	PrivateFor []string `protobuf:"bytes,3,rep,name=private_for,json=privateFor,proto3" json:"private_for,omitempty"`
	// For Quorum >=2.2.1 support
	PrivateTxType        string   `protobuf:"bytes,4,opt,name=private_tx_type,json=privateTxType,proto3" json:"private_tx_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Quorum) Reset()         { *m = Quorum{} }
func (m *Quorum) String() string { return proto.CompactTextString(m) }
func (*Quorum) ProtoMessage()    {}
func (*Quorum) Descriptor() ([]byte, []int) {
	return fileDescriptor_b023ebb8cbd2604f, []int{0}
}

func (m *Quorum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Quorum.Unmarshal(m, b)
}
func (m *Quorum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Quorum.Marshal(b, m, deterministic)
}
func (m *Quorum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quorum.Merge(m, src)
}
func (m *Quorum) XXX_Size() int {
	return xxx_messageInfo_Quorum.Size(m)
}
func (m *Quorum) XXX_DiscardUnknown() {
	xxx_messageInfo_Quorum.DiscardUnknown(m)
}

var xxx_messageInfo_Quorum proto.InternalMessageInfo

func (m *Quorum) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Quorum) GetPrivateFrom() string {
	if m != nil {
		return m.PrivateFrom
	}
	return ""
}

func (m *Quorum) GetPrivateFor() []string {
	if m != nil {
		return m.PrivateFor
	}
	return nil
}

func (m *Quorum) GetPrivateTxType() string {
	if m != nil {
		return m.PrivateTxType
	}
	return ""
}

func init() {
	proto.RegisterType((*Quorum)(nil), "quorum.Quorum")
}

func init() { proto.RegisterFile("types/quorum/quorum.proto", fileDescriptor_b023ebb8cbd2604f) }

var fileDescriptor_b023ebb8cbd2604f = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2c, 0xa9, 0x2c, 0x48,
	0x2d, 0xd6, 0x2f, 0x2c, 0xcd, 0x2f, 0x2a, 0xcd, 0x85, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9,
	0x42, 0x6c, 0x10, 0x9e, 0x52, 0x1f, 0x23, 0x17, 0x5b, 0x20, 0x98, 0x29, 0x24, 0xc1, 0xc5, 0x5e,
	0x96, 0x5a, 0x54, 0x9c, 0x99, 0x9f, 0x27, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe3, 0x0a,
	0x29, 0x72, 0xf1, 0x14, 0x14, 0x65, 0x96, 0x25, 0x96, 0xa4, 0xc6, 0xa7, 0x15, 0xe5, 0xe7, 0x4a,
	0x30, 0x81, 0xa5, 0xb9, 0xa1, 0x62, 0x6e, 0x45, 0xf9, 0xb9, 0x42, 0xf2, 0x5c, 0xdc, 0x70, 0x25,
	0xf9, 0x45, 0x12, 0xcc, 0x0a, 0xcc, 0x1a, 0x9c, 0x41, 0x5c, 0x30, 0x15, 0xf9, 0x45, 0x42, 0x6a,
	0x5c, 0xfc, 0x30, 0x05, 0x25, 0x15, 0xf1, 0x20, 0x87, 0x49, 0xb0, 0x80, 0x8d, 0xe1, 0x85, 0x0a,
	0x87, 0x54, 0x84, 0x54, 0x16, 0xa4, 0x3a, 0x39, 0x44, 0xd9, 0xa5, 0x67, 0x96, 0xe4, 0x24, 0x26,
	0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x3b, 0xe7, 0xe7, 0x15, 0xa7, 0xe6, 0x05, 0x57, 0x16, 0xeb, 0x27,
	0xe7, 0x64, 0xa6, 0xe6, 0x95, 0xe8, 0xa7, 0x15, 0xe9, 0x27, 0xe7, 0x17, 0xa5, 0xea, 0x16, 0x97,
	0x24, 0x26, 0x67, 0xeb, 0x17, 0x64, 0xa7, 0xeb, 0xa5, 0x67, 0x96, 0xe8, 0x23, 0xfb, 0x33, 0x89,
	0x0d, 0xec, 0x43, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xbd, 0x5d, 0xba, 0xfe, 0x00,
	0x00, 0x00,
}
